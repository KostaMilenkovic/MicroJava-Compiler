package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import rs.etf.pp1.mj.runtime.Code;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.ac.bg.etf.pp1.impl.*;
import rs.ac.bg.etf.pp1.impl.CompilerImpl.DefinitionScope;
import rs.ac.bg.etf.pp1.impl.CompilerImpl.Position;


//===========================================================
//PARSER CODE REDEFINITION
//===========================================================

parser code {:	
    CompilerImpl impl = new CompilerImpl() ;	

    Logger log = Logger.getLogger(getClass());
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      impl.reportError(message + info.toString());
    }
  
    public void syntax_error(Symbol cur_token) {
        impl.reportError("Wrong syntax, unknown token " + cur_token.toString() + " on line : " + cur_token.left);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        impl.reportFatalError(cur_token.toString());
    }
	
    public void report_error(String message, Object info){
        System.err.print(message);
        System.err.flush();
        if (info instanceof Symbol)
            System.err.println("Error : on line " + ((Symbol)info).left);
        else System.err.println("");
    }
:}

action code {:
    CompilerImpl impl = new CompilerImpl() ;	
:}

init with {:
  Tab.init(); 
:}

scan with {:
    Symbol s = this.getScanner().next_token();
    if (s != null && s.value != null) 
            log.info(s.toString() + " " + s.value.toString());
    return s;
:}

//============================================================
//TERMINALS & NON-TERMINALS
//============================================================

terminal     PROG, STATIC, CONTINUE, LBRACE, RBRACE, COMMA, LPAREN, RPAREN, SEMI_COMMA, PRINT, RETURN, VOID, LSQUARE, RSQUARE, READ, BREAK;
terminal     IF, ELSE;
terminal     CLASS, EXTENDS, CONST;
terminal     INC, DEC, FOR, OR, AND, NEQ, GT, GEQ, LT, LEQ, DOT, NEW, EQ;
terminal     ASSIGN, ASSIGN_PLUS, ASSIGN_MINUS, ASSIGN_MUL, ASSIGN_DIV, ASSIGN_MOD ;
terminal     ADD, SUB, MUL, DIV, MOD;
terminal     Character CHAR;
terminal     Boolean BOOL;
terminal     Integer NUMBER;
terminal     String IDENT;

non terminal Program, GlobalParamList, MethodListExt, MethodList ;
non terminal ConstDecl, ConstList, Constant, ConstValue ;
non terminal GlobalVarDecl, GlobalVarList, GlobalVar ; 
non terminal ClassDecl, ClassExtended;
non terminal MethodDecl, MethodStatic, MethodReturnType, FormPars, MethodVarDeclList, MethodVarListAdditional, MethodVarDecl, MethodVarList, MethodVar, FormalParamList, FormalParamDecl;
non terminal StatementList, Statement, ForStatement, ReadStatement, PrintStatement, ReturnStatement;
non terminal DesignatorStatement, DesignatorAssign, DesignatorExtensionBracks, ActPars ;
non terminal ForStatementDesignatorExtension, ForStatementConditionExtension ;
non terminal IfStatement, IfCondition;
non terminal Obj Designator, Term, Factor, TermList, DesignatorExtension, TermListExt ;
non terminal Struct Type, Expr, CondFact, Condition, CondTerm ;
non terminal Integer Assignop, Relop, AddopLeft, AddopRight, MulopLeft, MulopRight ;  


precedence left ELSE;

//==========================================================
//GRAMMAR
//==========================================================

//----------------------------------------------------------
//PROGRAM
//----------------------------------------------------------
Program ::=     PROG IDENT:name {: impl.startProgram(name); :} GlobalParamList LBRACE MethodList RBRACE {: impl.endProgram(); :};

GlobalParamList ::= 
                GlobalParamList ConstDecl 
               |GlobalParamList GlobalVarDecl 
               |GlobalParamList ClassDecl 
               |/*epsilon*/;

Type ::=        IDENT:type {: RESULT = impl.resolveType(type, typeleft); :} ;
//----------------------------------------------------------
//CONSTANT
//----------------------------------------------------------
ConstDecl ::=   CONST Type:type {: impl.currentConstType = type; :} ConstList SEMI_COMMA;

ConstList ::=  	Constant
                |Constant COMMA ConstList 
                |error:err {: impl.reportError("Successful error recovery on line ", errleft); :};

Constant ::=    IDENT:name ASSIGN ConstValue:value {: impl.defineConst(name, value, nameleft); :};

ConstValue ::=  NUMBER:value {: RESULT = value; :}
                |CHAR:value {: RESULT = value; :}
                |BOOL:value {: RESULT = value; :};
//----------------------------------------------------------
//GLOBAL VARIABLE
//----------------------------------------------------------
GlobalVarDecl ::=     
                Type:type {: impl.currentVarType = type; :} GlobalVarList SEMI_COMMA 
        |       error:err SEMI_COMMA {: impl.reportInfo("Successful error recovery. Line ", errleft); :} ;

GlobalVarList ::=     
                GlobalVar COMMA GlobalVarList 
        |       GlobalVar
        |       error COMMA GlobalVarList:globalVarList {: impl.reportInfo("Successful error recovery. Line ", globalVarListleft); :} 
        |       error:err {: impl.reportInfo("Successful error recovery. Line", errleft); :} ;

GlobalVar ::=   IDENT:name {: impl.defineVar(name, DefinitionScope.GLOBAL, false, nameleft); :} 
        |       IDENT:name LSQUARE RSQUARE{: impl.defineVar(name, DefinitionScope.GLOBAL, true, nameleft); :} ;
//----------------------------------------------------------
//CLASS ok
//----------------------------------------------------------
ClassDecl ::=   CLASS IDENT:name ClassExtended {: impl.startClass(name, nameleft); :} LBRACE MethodVarDeclList MethodListExt RBRACE {: impl.endClass(); :};

ClassExtended ::=   
                EXTENDS Type:type {: impl.currentExtendedClassType = type; :} 
        |       /* epsilon */ {: impl.currentExtendedClassType = null; :} ;
//----------------------------------------------------------
//METHOD
//----------------------------------------------------------
MethodListExt ::=
                LBRACE MethodList RBRACE
        |       /*epsilon*/;

MethodList ::=  MethodList MethodDecl 
        |       /* epsilon */ ;

MethodDecl ::=  MethodStatic MethodReturnType:methodReturnType LPAREN FormPars RPAREN MethodVarDeclList {: impl.startMethod(); :} LBRACE  StatementList RBRACE {: impl.endMethod(); :};

MethodStatic ::=
                STATIC
        |       /*epsilon*/;

MethodReturnType ::=    
                Type:type IDENT:name {: impl.currentMethodName=name; impl.currentMethodType = type; impl.currentMethodNameLine=nameleft; impl.defineMethod(); :}
        |       VOID IDENT:name {: impl.currentMethodName=name; impl.currentMethodType = null; impl.currentMethodNameLine=nameleft;  impl.defineMethod(); :} ;

FormPars ::=    
                FormalParamList
        |       /* epsilon */ ;

FormalParamList ::= 
                FormalParamDecl COMMA FormalParamList 
        |       error:err COMMA FormalParamList {: impl.reportInfo("Successful error recovery on line ", errleft); :}
        |       error:err {: impl.reportInfo("Successful error recovery on line ", errleft); :}
        |       FormalParamDecl ;

FormalParamDecl ::= 
                Type:type IDENT:name {: impl.currentVarType = type; impl.defineVar(name, DefinitionScope.ELSE, false, nameleft); :}
        |       Type:type IDENT:name LSQUARE RSQUARE {: impl.currentVarType = type; impl.defineVar(name, DefinitionScope.ELSE, true, nameleft); :} ;

MethodVarDeclList ::=   
                MethodVarDecl MethodVarDeclList
        |       error:err SEMI_COMMA {: impl.reportInfo("Successful error recovery on line ", errleft); :} 
		|		error:err {: impl.reportInfo("Successful error recovery on line ", errleft); :} 
        |       /* epsilon */ ; 

MethodVarDecl ::=     
                Type:type {: impl.currentVarType = type; :} MethodVarList SEMI_COMMA;

MethodVarList ::= 
                MethodVar MethodVarListAdditional {: impl.countElement(Position.METHOD_ARGUMENT); :};
                
MethodVarListAdditional ::= 
                MethodVarListAdditional COMMA MethodVar {: impl.countElement(Position.METHOD_ARGUMENT); :}
        |       MethodVarListAdditional:line COMMA error {: impl.reportInfo("Successful error recovery. Line ", lineleft); :} 
        |       error:err {: impl.reportInfo("Successful error recovery. Line ", errleft); :}
        |       /* epsilon */ ;
		
MethodVar ::=   IDENT:name  {: impl.defineVar(name, DefinitionScope.LOCAL, false, nameleft); :} 
        |       IDENT:name LSQUARE RSQUARE {: impl.defineVar(name, DefinitionScope.LOCAL, true, nameleft); :} ;
//----------------------------------------------------------
//STATEMENT
//----------------------------------------------------------
StatementList ::=   
                StatementList Statement {: impl.countElement(Position.BLOCK_STATEMENTS); :}
        |       /* epsilon */ ;

Statement ::=    
                DesignatorStatement SEMI_COMMA    
        |       PrintStatement SEMI_COMMA 
        |       ReturnStatement SEMI_COMMA 
        |       ReadStatement SEMI_COMMA 
        |	ForStatement 
        |       CONTINUE SEMI_COMMA
        |       BREAK SEMI_COMMA
        |	IfStatement 
        |       LBRACE StatementList RBRACE ;
//----------------------------------------------------------
//DESIGNATOR STATEMENT
//----------------------------------------------------------
DesignatorStatement ::= 
                DesignatorAssign
        |       Designator:des LPAREN RPAREN {: RESULT = impl.designatorCall(des, null, desleft); :}
        |       Designator:des LPAREN ActPars RPAREN {: if("main".equals(impl.currentMethod.getName())) impl.countElement(Position.GLOBAL_METHOD); :}
        |       Designator:des INC:inc {: RESULT = impl.designatorInc(des, desleft); :}
        |       Designator:des DEC:dec {: RESULT = impl.designatorDec(des, desleft); :} ;

DesignatorAssign ::=
                Designator:des {: impl.inAssign = true; :} Assignop:op Expr:expr {: RESULT = impl.assign(des, op, expr, desleft); impl.inAssign = false; :} 
        |       error:err {: impl.reportInfo("Successful error recovery. Line ", errleft); :} ;

Designator ::=  
                IDENT:ident {: impl.setArrayExtension(ident, identleft); :} DesignatorExtension:designatorExtension {: RESULT = impl.resolveIdentificator(ident, designatorExtension, identleft); :};

DesignatorExtension ::= 
                DesignatorExtension DOT IDENT 
        |       DesignatorExtension LSQUARE:l {: RESULT = impl.resolveArray(lleft); :} DesignatorExtensionBracks RSQUARE 
        |       /* epsilon */ ;

DesignatorExtensionBracks ::= 
                Expr:expr {: impl.checkIfInt(expr, exprleft); :} 
        |       error:err {: impl.reportInfo("Successful error recovery. Line ", errleft); :} ;

ActPars ::=     Expr:expr {: RESULT = expr; impl.reportInfo("Actual parameter detected. Line ", exprleft); :}
        |       Expr:expr {: impl.reportInfo("Actual parameter detected. Line ", exprleft); :} COMMA ActPars ;
//----------------------------------------------------------
//PRINT, RETURN, READ
//----------------------------------------------------------
PrintStatement ::= 
                PRINT LPAREN Expr:expr RPAREN {: impl.checkPrint(expr, 1, exprleft); :}
        |       PRINT LPAREN Expr:expr COMMA NUMBER:num RPAREN {: impl.checkPrint(expr, num, exprleft); :} ;

ReturnStatement ::= 
                RETURN {: impl.checkReturn(null); :}
        |       RETURN Expr:expr {: impl.checkReturn(expr); :} ;

ReadStatement ::= 
                READ LPAREN Designator:des RPAREN {: impl.checkRead(des, desleft); :} ;
//----------------------------------------------------------
//FOR
//----------------------------------------------------------
ForStatement ::= 
                FOR LPAREN ForStatementDesignatorExtension SEMI_COMMA ForStatementConditionExtension SEMI_COMMA ForStatementDesignatorExtension RPAREN {: impl.isInForStatement = true; :} Statement {: impl.isInForStatement = false; :} ;

ForStatementDesignatorExtension ::= 
                DesignatorStatement 
        |       /* epsilon */ ;

ForStatementConditionExtension ::=  
                Condition:condition {: impl.checkForCondition(condition, conditionleft); :}
        |       /* epsilon */ ;
//----------------------------------------------------------
//IF-ELSE
//----------------------------------------------------------
IfStatement ::=     
                IfCondition:ifCondition Statement:ifStatement ELSE Statement:elseStatement 
        |       IfCondition:ifCondition Statement:ifStatement;

IfCondition ::= IF LPAREN Condition RPAREN ;

Condition ::=       
                CondTerm:condTerm {: impl.checkIfCondition(condTerm, condTermleft); :}
        |       CondTerm OR Condition 
        |       error:err {: impl.reportInfo("Successful error recovery. Line ", errleft); :};

CondTerm ::=   
                CondFact:condFact {: RESULT = condFact;  :}
        |       CondFact AND CondTerm ;
 		   
CondFact ::=   
                Expr:expr {: RESULT = expr; :}
        |       Expr:exprLeft Relop:relop Expr:exprRight {: RESULT = impl.checkConditionTypes(exprLeft, exprRight, exprLeftleft); :};
//----------------------------------------------------------
//EXPRESSION
//----------------------------------------------------------			  
Expr ::=        TermListExt:termListExt {: RESULT = (termListExt!=null)?termListExt.getType():null; impl.fromDesignator = false; :}
        |       SUB TermListExt:termListExt {: RESULT = termListExt.getType(); Code.put(Code.neg); impl.fromDesignator = false; :} ;
		 
TermListExt ::= 
                TermList:termList {: impl.checkTermListForArray(termList, termListleft); RESULT = termList; :}
        |       TermList:termList AddopRight:addop {: impl.addOpRightCount++; :} TermListExt:termListExt {: RESULT = impl.addRight(termList, addop, termListExt, termListleft); :}
        |       TermList:termList MulopRight:mulop {: impl.mulOpRightCount++; :} TermListExt:termListExt {: RESULT = impl.mulRight(termList, mulop, termListExt, termListleft); :} ;

TermList ::=    Term:term {: RESULT = term; :}
        |       TermList:termList {: impl.loadIfArray(termList,termListleft); :} AddopLeft:addop {: impl.addOpLeftCount++; :} Term:term {: impl.loadIfArray(term,termleft); RESULT = impl.addLeft(termList, addop, term, termListleft); :};	 

Term ::=        Factor:factor {: RESULT = factor; :}
        |       Term:term {: impl.loadIfArray(term,termleft); :} MulopLeft:mulop {: impl.mulOpLeftCount++; :} Factor:factor {: impl.loadIfArray(factor,factorleft); RESULT = impl.mulLeft(term, mulop, factor, termleft); :} ;

Factor ::=       
                Designator:des {: RESULT = impl.loadDesignator(des, desleft); :}
        |       Designator:des LPAREN RPAREN
        |       Designator:des LPAREN ActPars:params RPAREN {: RESULT = impl.loadMethod(des, desleft); :}
        |       NUMBER:num {: RESULT = impl.loadInteger(num, numleft); :}
        |       CHAR:c {: RESULT = impl.loadChar(c,cleft); :}
        |       BOOL:bool {: RESULT = impl.loadBoolean(bool,boolleft); :}
        |       LPAREN Expr:expr RPAREN {: RESULT = impl.loadExpression(expr, exprleft); :}
        |       NEW Type:type LSQUARE Expr:expr RSQUARE  {: RESULT = impl.loadArray(type, expr, typeleft); :}
        |       NEW Type:type; 
//----------------------------------------------------------
//OPERATION
//----------------------------------------------------------
Assignop ::=    ASSIGN {: RESULT = new Integer(0); :}
        |       AddopRight:opCode {: RESULT = opCode; :}
        |       MulopRight:opCode {: RESULT = opCode; :};

AddopLeft ::=   ADD {: RESULT = new Integer(Code.add); :}
        |       SUB {: RESULT = new Integer(Code.sub); :} ;

AddopRight ::=  ASSIGN_PLUS {: RESULT = new Integer(Code.add); :}
        |       ASSIGN_MINUS {: RESULT = new Integer(Code.sub); :} ;

MulopLeft ::=   MUL {: RESULT = new Integer(Code.mul); :}
        |       DIV {: RESULT = new Integer(Code.div); :}
        |       MOD {: RESULT = new Integer(Code.rem); :} ;

MulopRight ::=  ASSIGN_MUL {: RESULT = new Integer(Code.mul); :}
        |       ASSIGN_DIV {: RESULT = new Integer(Code.div); :}
        |       ASSIGN_MOD {: RESULT = new Integer(Code.rem); :} ;
		
Relop ::=       EQ {: RESULT = new Integer(Code.eq); :}
        |       NEQ {: RESULT = new Integer(Code.ne); :}
        |       GT {: RESULT = new Integer(Code.gt); :}
        |       GEQ {: RESULT = new Integer(Code.ge); :} 
        |       LT {: RESULT = new Integer(Code.lt); :}
        |       LEQ {: RESULT = new Integer(Code.le); :} ; 
