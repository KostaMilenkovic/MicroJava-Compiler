
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 10 19:38:14 CET 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import rs.etf.pp1.mj.runtime.Code;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.ac.bg.etf.pp1.impl.*;
import rs.ac.bg.etf.pp1.impl.CompilerImpl.DefinitionScope;
import rs.ac.bg.etf.pp1.impl.CompilerImpl.Position;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 10 19:38:14 CET 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\234\000\002\071\002\000\002\002\011\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\002\000\002\056\003\000\002\072\002\000" +
    "\002\006\007\000\002\007\003\000\002\007\005\000\002" +
    "\007\003\000\002\010\005\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\073\002\000\002\012\006" +
    "\000\002\012\004\000\002\013\005\000\002\013\003\000" +
    "\002\013\005\000\002\013\003\000\002\014\003\000\002" +
    "\014\005\000\002\074\002\000\002\015\012\000\002\016" +
    "\004\000\002\016\002\000\002\004\005\000\002\004\002" +
    "\000\002\005\004\000\002\005\002\000\002\075\002\000" +
    "\002\017\014\000\002\020\003\000\002\020\002\000\002" +
    "\021\004\000\002\021\004\000\002\022\003\000\002\022" +
    "\002\000\002\030\005\000\002\030\005\000\002\030\003" +
    "\000\002\030\003\000\002\031\004\000\002\031\006\000" +
    "\002\023\004\000\002\023\004\000\002\023\003\000\002" +
    "\023\002\000\002\076\002\000\002\025\006\000\002\026" +
    "\004\000\002\024\005\000\002\024\005\000\002\024\003" +
    "\000\002\024\002\000\002\027\003\000\002\027\005\000" +
    "\002\032\004\000\002\032\002\000\002\033\004\000\002" +
    "\033\004\000\002\033\004\000\002\033\004\000\002\033" +
    "\003\000\002\033\004\000\002\033\004\000\002\033\003" +
    "\000\002\033\005\000\002\040\003\000\002\040\005\000" +
    "\002\040\006\000\002\040\004\000\002\040\004\000\002" +
    "\077\002\000\002\041\006\000\002\041\003\000\002\100" +
    "\002\000\002\050\005\000\002\054\005\000\002\101\002" +
    "\000\002\054\007\000\002\054\002\000\002\042\003\000" +
    "\002\042\003\000\002\043\003\000\002\102\002\000\002" +
    "\043\006\000\002\036\006\000\002\036\010\000\002\037" +
    "\003\000\002\037\004\000\002\035\006\000\002\103\002" +
    "\000\002\034\014\000\002\044\003\000\002\044\002\000" +
    "\002\045\003\000\002\045\002\000\002\046\006\000\002" +
    "\046\004\000\002\047\006\000\002\061\003\000\002\061" +
    "\005\000\002\061\003\000\002\062\003\000\002\062\005" +
    "\000\002\060\003\000\002\060\005\000\002\057\003\000" +
    "\002\057\004\000\002\055\003\000\002\104\002\000\002" +
    "\055\006\000\002\105\002\000\002\055\006\000\002\053" +
    "\003\000\002\106\002\000\002\107\002\000\002\053\007" +
    "\000\002\051\003\000\002\110\002\000\002\111\002\000" +
    "\002\051\007\000\002\052\003\000\002\052\005\000\002" +
    "\052\006\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\005\000\002\052\007\000\002\052\004" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\065\003\000\002\065\003\000\002\066\003\000\002" +
    "\066\003\000\002\067\003\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\070\003\000\002\070\003" +
    "\000\002\070\003\000\002\064\003\000\002\064\003\000" +
    "\002\064\003\000\002\064\003\000\002\064\003\000\002" +
    "\064\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\004\004\005\001\002\000\004\002\367\001" +
    "\002\000\004\065\006\001\002\000\014\003\001\007\001" +
    "\026\001\030\001\065\001\001\002\000\014\003\ufffb\007" +
    "\ufffb\026\ufffb\030\ufffb\065\ufffb\001\002\000\014\003\016" +
    "\007\012\026\020\030\021\065\013\001\002\000\006\003" +
    "\ufff0\065\ufff0\001\002\000\012\005\uffe0\010\uffe0\017\uffe0" +
    "\065\uffe0\001\002\000\070\003\ufffa\007\ufffa\011\ufffa\013" +
    "\ufffa\014\ufffa\020\ufffa\021\ufffa\034\ufffa\035\ufffa\036\ufffa" +
    "\037\ufffa\040\ufffa\041\ufffa\042\ufffa\045\ufffa\047\ufffa\050" +
    "\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa" +
    "\057\ufffa\060\ufffa\061\ufffa\065\ufffa\001\002\000\014\003" +
    "\ufffd\007\ufffd\026\ufffd\030\ufffd\065\ufffd\001\002\000\014" +
    "\003\ufffc\007\ufffc\026\ufffc\030\ufffc\065\ufffc\001\002\000" +
    "\004\014\350\001\002\000\014\003\ufffe\007\ufffe\026\ufffe" +
    "\030\ufffe\065\ufffe\001\002\000\004\065\040\001\002\000" +
    "\004\065\013\001\002\000\006\003\ufff9\065\ufff9\001\002" +
    "\000\006\003\024\065\027\001\002\000\004\014\ufff5\001" +
    "\002\000\006\011\036\014\ufff7\001\002\000\004\014\035" +
    "\001\002\000\004\046\030\001\002\000\010\062\034\063" +
    "\032\064\031\001\002\000\006\011\ufff3\014\ufff3\001\002" +
    "\000\006\011\ufff1\014\ufff1\001\002\000\006\011\ufff4\014" +
    "\ufff4\001\002\000\006\011\ufff2\014\ufff2\001\002\000\014" +
    "\003\ufff8\007\ufff8\026\ufff8\030\ufff8\065\ufff8\001\002\000" +
    "\006\003\024\065\027\001\002\000\004\014\ufff6\001\002" +
    "\000\006\007\uffe4\027\041\001\002\000\004\065\013\001" +
    "\002\000\004\007\uffe7\001\002\000\004\007\044\001\002" +
    "\000\012\003\046\007\uffce\010\uffce\065\013\001\002\000" +
    "\004\065\uffcd\001\002\000\010\007\uffcf\010\uffcf\014\332" +
    "\001\002\000\006\007\052\010\uffe2\001\002\000\012\003" +
    "\046\007\uffce\010\uffce\065\013\001\002\000\006\007\uffd1" +
    "\010\uffd1\001\002\000\012\005\uffe0\010\uffe0\017\uffe0\065" +
    "\uffe0\001\002\000\004\010\054\001\002\000\014\003\uffe6" +
    "\007\uffe6\026\uffe6\030\uffe6\065\uffe6\001\002\000\012\005" +
    "\056\010\057\017\uffdc\065\uffdc\001\002\000\006\017\uffdd" +
    "\065\uffdd\001\002\000\004\010\uffe3\001\002\000\012\005" +
    "\uffe1\010\uffe1\017\uffe1\065\uffe1\001\002\000\006\017\064" +
    "\065\013\001\002\000\004\012\067\001\002\000\004\065" +
    "\066\001\002\000\004\065\065\001\002\000\004\012\uffda" +
    "\001\002\000\004\012\uffdb\001\002\000\010\003\071\013" +
    "\uffd8\065\013\001\002\000\004\065\327\001\002\000\006" +
    "\011\325\013\uffd5\001\002\000\004\013\uffd9\001\002\000" +
    "\004\013\077\001\002\000\006\011\075\013\uffd4\001\002" +
    "\000\006\003\071\065\013\001\002\000\004\013\uffd7\001" +
    "\002\000\010\003\046\007\uffce\065\013\001\002\000\004" +
    "\007\uffdf\001\002\000\004\007\102\001\002\000\030\003" +
    "\uffc3\006\uffc3\007\uffc3\010\uffc3\015\uffc3\016\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\033\uffc3\065\uffc3\001\002\000\030\003" +
    "\123\006\106\007\120\010\110\015\124\016\114\022\105" +
    "\023\122\024\116\033\130\065\107\001\002\000\024\012" +
    "\314\031\311\032\312\046\uffb4\047\uffb4\050\uffb4\051\uffb4" +
    "\052\uffb4\053\uffb4\001\002\000\004\012\306\001\002\000" +
    "\004\014\305\001\002\000\074\011\uffb1\012\uffb1\013\uffb1" +
    "\014\uffb1\020\uffb1\021\uffb1\031\uffb1\032\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1" +
    "\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053" +
    "\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1" +
    "\001\002\000\012\005\uffde\010\uffde\017\uffde\065\uffde\001" +
    "\002\000\004\014\272\001\002\000\004\014\271\001\002" +
    "\000\004\014\270\001\002\000\022\012\144\014\uffa4\044" +
    "\151\056\145\062\140\063\152\064\146\065\107\001\002" +
    "\000\032\003\uffbb\006\uffbb\007\uffbb\010\uffbb\015\uffbb\016" +
    "\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\033\uffbb\065\uffbb" +
    "\001\002\000\004\012\264\001\002\000\032\003\uffbe\006" +
    "\uffbe\007\uffbe\010\uffbe\015\uffbe\016\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\033\uffbe\065\uffbe\001\002\000\030\003" +
    "\uffc3\006\uffc3\007\uffc3\010\uffc3\015\uffc3\016\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\033\uffc3\065\uffc3\001\002\000\026\003" +
    "\123\006\106\007\120\015\124\016\114\022\105\023\122" +
    "\024\116\033\130\065\107\001\002\000\004\014\256\001" +
    "\002\000\006\013\uffb2\014\uffb2\001\002\000\004\012\250" +
    "\001\002\000\030\003\uffc4\006\uffc4\007\uffc4\010\uffc4\015" +
    "\uffc4\016\uffc4\022\uffc4\023\uffc4\024\uffc4\033\uffc4\065\uffc4" +
    "\001\002\000\004\014\247\001\002\000\006\013\uffb9\014" +
    "\uffb9\001\002\000\004\012\131\001\002\000\010\003\123" +
    "\014\uff9e\065\107\001\002\000\006\013\uff9f\014\uff9f\001" +
    "\002\000\004\014\134\001\002\000\024\003\147\012\144" +
    "\014\uff9c\044\151\056\145\062\140\063\152\064\146\065" +
    "\107\001\002\000\062\011\uff82\012\237\013\uff82\014\uff82" +
    "\021\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040\uff82\041" +
    "\uff82\042\uff82\045\uff82\047\uff82\050\uff82\051\uff82\052\uff82" +
    "\053\uff82\054\uff82\055\uff82\056\uff82\057\uff82\060\uff82\061" +
    "\uff82\001\002\000\060\011\uff86\013\uff86\014\uff86\021\uff86" +
    "\034\uff86\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042" +
    "\uff86\045\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053\uff86" +
    "\054\uff86\055\uff86\056\uff86\057\uff86\060\uff86\061\uff86\001" +
    "\002\000\004\014\232\001\002\000\060\011\uff7e\013\uff7e" +
    "\014\uff7e\021\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040" +
    "\uff7e\041\uff7e\042\uff7e\045\uff7e\047\uff7e\050\uff7e\051\uff7e" +
    "\052\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\057\uff7e\060" +
    "\uff7e\061\uff7e\001\002\000\032\011\uff91\013\uff91\014\uff91" +
    "\021\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91\041" +
    "\uff91\042\uff91\045\uff91\001\002\000\012\013\uff95\014\uff95" +
    "\034\uff95\035\230\001\002\000\026\013\uff93\014\uff93\034" +
    "\uff93\035\uff93\036\225\037\222\040\223\041\220\042\224" +
    "\045\221\001\002\000\020\012\144\044\151\056\145\062" +
    "\140\063\152\064\146\065\107\001\002\000\016\012\144" +
    "\044\151\062\140\063\152\064\146\065\107\001\002\000" +
    "\060\011\uff7f\013\uff7f\014\uff7f\021\uff7f\034\uff7f\035\uff7f" +
    "\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\045\uff7f\047" +
    "\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f" +
    "\056\uff7f\057\uff7f\060\uff7f\061\uff7f\001\002\000\006\013" +
    "\uff96\014\uff96\001\002\000\050\011\uff8f\013\uff8f\014\uff8f" +
    "\021\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041" +
    "\uff8f\042\uff8f\045\uff8f\047\177\050\201\051\175\052\176" +
    "\053\203\055\uff89\056\uff89\001\002\000\004\065\013\001" +
    "\002\000\060\011\uff7d\013\uff7d\014\uff7d\021\uff7d\034\uff7d" +
    "\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d\045" +
    "\uff7d\047\uff7d\050\uff7d\051\uff7d\052\uff7d\053\uff7d\054\uff7d" +
    "\055\uff7d\056\uff7d\057\uff7d\060\uff7d\061\uff7d\001\002\000" +
    "\010\013\uff98\014\uff98\034\166\001\002\000\060\011\uff8a" +
    "\013\uff8a\014\uff8a\021\uff8a\034\uff8a\035\uff8a\036\uff8a\037" +
    "\uff8a\040\uff8a\041\uff8a\042\uff8a\045\uff8a\047\uff8a\050\uff8a" +
    "\051\uff8a\052\uff8a\053\uff8a\054\uff85\055\uff8a\056\uff8a\057" +
    "\uff85\060\uff85\061\uff85\001\002\000\004\014\uff9d\001\002" +
    "\000\012\054\161\057\160\060\163\061\157\001\002\000" +
    "\016\012\uff70\044\uff70\062\uff70\063\uff70\064\uff70\065\uff70" +
    "\001\002\000\016\012\uff72\044\uff72\062\uff72\063\uff72\064" +
    "\uff72\065\uff72\001\002\000\016\012\uff6f\044\uff6f\062\uff6f" +
    "\063\uff6f\064\uff6f\065\uff6f\001\002\000\016\012\uff84\044" +
    "\uff84\062\uff84\063\uff84\064\uff84\065\uff84\001\002\000\016" +
    "\012\uff71\044\uff71\062\uff71\063\uff71\064\uff71\065\uff71\001" +
    "\002\000\016\012\144\044\151\062\140\063\152\064\146" +
    "\065\107\001\002\000\060\011\uff83\013\uff83\014\uff83\021" +
    "\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83" +
    "\042\uff83\045\uff83\047\uff83\050\uff83\051\uff83\052\uff83\053" +
    "\uff83\054\uff83\055\uff83\056\uff83\057\uff83\060\uff83\061\uff83" +
    "\001\002\000\022\003\147\012\144\044\151\056\145\062" +
    "\140\063\152\064\146\065\107\001\002\000\006\013\uff97" +
    "\014\uff97\001\002\000\062\011\uff7a\013\uff7a\014\uff7a\020" +
    "\171\021\uff7a\034\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a" +
    "\041\uff7a\042\uff7a\045\uff7a\047\uff7a\050\uff7a\051\uff7a\052" +
    "\uff7a\053\uff7a\054\uff7a\055\uff7a\056\uff7a\057\uff7a\060\uff7a" +
    "\061\uff7a\001\002\000\020\012\144\044\151\056\145\062" +
    "\140\063\152\064\146\065\107\001\002\000\004\021\173" +
    "\001\002\000\060\011\uff7b\013\uff7b\014\uff7b\021\uff7b\034" +
    "\uff7b\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b" +
    "\045\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\054" +
    "\uff7b\055\uff7b\056\uff7b\057\uff7b\060\uff7b\061\uff7b\001\002" +
    "\000\016\012\uff8c\044\uff8c\062\uff8c\063\uff8c\064\uff8c\065" +
    "\uff8c\001\002\000\020\012\uff6e\044\uff6e\056\uff6e\062\uff6e" +
    "\063\uff6e\064\uff6e\065\uff6e\001\002\000\020\012\uff6d\044" +
    "\uff6d\056\uff6d\062\uff6d\063\uff6d\064\uff6d\065\uff6d\001\002" +
    "\000\020\012\uff74\044\uff74\056\uff74\062\uff74\063\uff74\064" +
    "\uff74\065\uff74\001\002\000\016\012\uff8e\044\uff8e\062\uff8e" +
    "\063\uff8e\064\uff8e\065\uff8e\001\002\000\020\012\uff73\044" +
    "\uff73\056\uff73\062\uff73\063\uff73\064\uff73\065\uff73\001\002" +
    "\000\006\055\205\056\204\001\002\000\020\012\uff6c\044" +
    "\uff6c\056\uff6c\062\uff6c\063\uff6c\064\uff6c\065\uff6c\001\002" +
    "\000\016\012\uff75\044\uff75\062\uff75\063\uff75\064\uff75\065" +
    "\uff75\001\002\000\016\012\uff76\044\uff76\062\uff76\063\uff76" +
    "\064\uff76\065\uff76\001\002\000\016\012\uff88\044\uff88\062" +
    "\uff88\063\uff88\064\uff88\065\uff88\001\002\000\016\012\144" +
    "\044\151\062\140\063\152\064\146\065\107\001\002\000" +
    "\060\011\uff87\013\uff87\014\uff87\021\uff87\034\uff87\035\uff87" +
    "\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87\045\uff87\047" +
    "\uff87\050\uff87\051\uff87\052\uff87\053\uff87\054\uff85\055\uff87" +
    "\056\uff87\057\uff85\060\uff85\061\uff85\001\002\000\016\012" +
    "\144\044\151\062\140\063\152\064\146\065\107\001\002" +
    "\000\032\011\uff8d\013\uff8d\014\uff8d\021\uff8d\034\uff8d\035" +
    "\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\045\uff8d" +
    "\001\002\000\016\012\144\044\151\062\140\063\152\064" +
    "\146\065\107\001\002\000\032\011\uff8b\013\uff8b\014\uff8b" +
    "\021\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041" +
    "\uff8b\042\uff8b\045\uff8b\001\002\000\032\011\uff90\013\uff90" +
    "\014\uff90\021\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040" +
    "\uff90\041\uff90\042\uff90\045\uff90\001\002\000\004\013\217" +
    "\001\002\000\060\011\uff7c\013\uff7c\014\uff7c\021\uff7c\034" +
    "\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c" +
    "\045\uff7c\047\uff7c\050\uff7c\051\uff7c\052\uff7c\053\uff7c\054" +
    "\uff7c\055\uff7c\056\uff7c\057\uff7c\060\uff7c\061\uff7c\001\002" +
    "\000\020\012\uff67\044\uff67\056\uff67\062\uff67\063\uff67\064" +
    "\uff67\065\uff67\001\002\000\020\012\uff6b\044\uff6b\056\uff6b" +
    "\062\uff6b\063\uff6b\064\uff6b\065\uff6b\001\002\000\020\012" +
    "\uff69\044\uff69\056\uff69\062\uff69\063\uff69\064\uff69\065\uff69" +
    "\001\002\000\020\012\uff68\044\uff68\056\uff68\062\uff68\063" +
    "\uff68\064\uff68\065\uff68\001\002\000\020\012\uff66\044\uff66" +
    "\056\uff66\062\uff66\063\uff66\064\uff66\065\uff66\001\002\000" +
    "\020\012\uff6a\044\uff6a\056\uff6a\062\uff6a\063\uff6a\064\uff6a" +
    "\065\uff6a\001\002\000\020\012\144\044\151\056\145\062" +
    "\140\063\152\064\146\065\107\001\002\000\012\013\uff92" +
    "\014\uff92\034\uff92\035\uff92\001\002\000\020\012\144\044" +
    "\151\056\145\062\140\063\152\064\146\065\107\001\002" +
    "\000\010\013\uff94\014\uff94\034\uff94\001\002\000\010\003" +
    "\123\013\uff9e\065\107\001\002\000\004\013\234\001\002" +
    "\000\026\003\uffa1\006\uffa1\007\uffa1\015\uffa1\016\uffa1\022" +
    "\uffa1\023\uffa1\024\uffa1\033\uffa1\065\uffa1\001\002\000\026" +
    "\003\123\006\106\007\120\015\124\016\114\022\105\023" +
    "\122\024\116\033\130\065\107\001\002\000\032\003\uffa0" +
    "\006\uffa0\007\uffa0\010\uffa0\015\uffa0\016\uffa0\022\uffa0\023" +
    "\uffa0\024\uffa0\025\uffa0\033\uffa0\065\uffa0\001\002\000\022" +
    "\012\144\013\242\044\151\056\145\062\140\063\152\064" +
    "\146\065\107\001\002\000\006\011\uffa8\013\uffa9\001\002" +
    "\000\004\013\243\001\002\000\060\011\uff81\013\uff81\014" +
    "\uff81\021\uff81\034\uff81\035\uff81\036\uff81\037\uff81\040\uff81" +
    "\041\uff81\042\uff81\045\uff81\047\uff81\050\uff81\051\uff81\052" +
    "\uff81\053\uff81\054\uff81\055\uff81\056\uff81\057\uff81\060\uff81" +
    "\061\uff81\001\002\000\060\011\uff80\013\uff80\014\uff80\021" +
    "\uff80\034\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80" +
    "\042\uff80\045\uff80\047\uff80\050\uff80\051\uff80\052\uff80\053" +
    "\uff80\054\uff80\055\uff80\056\uff80\057\uff80\060\uff80\061\uff80" +
    "\001\002\000\004\011\245\001\002\000\020\012\144\044" +
    "\151\056\145\062\140\063\152\064\146\065\107\001\002" +
    "\000\004\013\uffa7\001\002\000\032\003\uffbf\006\uffbf\007" +
    "\uffbf\010\uffbf\015\uffbf\016\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\033\uffbf\065\uffbf\001\002\000\020\012\144\044" +
    "\151\056\145\062\140\063\152\064\146\065\107\001\002" +
    "\000\006\011\252\013\253\001\002\000\004\064\254\001" +
    "\002\000\004\014\uffa6\001\002\000\004\013\255\001\002" +
    "\000\004\014\uffa5\001\002\000\032\003\uffbc\006\uffbc\007" +
    "\uffbc\010\uffbc\015\uffbc\016\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\033\uffbc\065\uffbc\001\002\000\032\003\uff9a\006" +
    "\uff9a\007\uff9a\010\uff9a\015\uff9a\016\uff9a\022\uff9a\023\uff9a" +
    "\024\uff9a\025\260\033\uff9a\065\uff9a\001\002\000\026\003" +
    "\123\006\106\007\120\015\124\016\114\022\105\023\122" +
    "\024\116\033\130\065\107\001\002\000\032\003\uff9b\006" +
    "\uff9b\007\uff9b\010\uff9b\015\uff9b\016\uff9b\022\uff9b\023\uff9b" +
    "\024\uff9b\025\uff9b\033\uff9b\065\uff9b\001\002\000\030\003" +
    "\123\006\106\007\120\010\263\015\124\016\114\022\105" +
    "\023\122\024\116\033\130\065\107\001\002\000\032\003" +
    "\uffba\006\uffba\007\uffba\010\uffba\015\uffba\016\uffba\022\uffba" +
    "\023\uffba\024\uffba\025\uffba\033\uffba\065\uffba\001\002\000" +
    "\022\003\147\012\144\044\151\056\145\062\140\063\152" +
    "\064\146\065\107\001\002\000\004\013\266\001\002\000" +
    "\026\003\uff99\006\uff99\007\uff99\015\uff99\016\uff99\022\uff99" +
    "\023\uff99\024\uff99\033\uff99\065\uff99\001\002\000\004\014" +
    "\uffa3\001\002\000\032\003\uffc1\006\uffc1\007\uffc1\010\uffc1" +
    "\015\uffc1\016\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\033" +
    "\uffc1\065\uffc1\001\002\000\032\003\uffc0\006\uffc0\007\uffc0" +
    "\010\uffc0\015\uffc0\016\uffc0\022\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\033\uffc0\065\uffc0\001\002\000\032\003\uffc2\006\uffc2" +
    "\007\uffc2\010\uffc2\015\uffc2\016\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\033\uffc2\065\uffc2\001\002\000\074\011\uffac" +
    "\012\uffac\013\uffac\014\uffac\020\uffac\021\uffac\031\uffac\032" +
    "\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac" +
    "\042\uffac\043\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051" +
    "\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac" +
    "\060\uffac\061\uffac\001\002\000\074\011\uffb0\012\uffb0\013" +
    "\uffb0\014\uffb0\020\275\021\uffb0\031\uffb0\032\uffb0\034\uffb0" +
    "\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043" +
    "\276\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061" +
    "\uffb0\001\002\000\022\003\uffae\012\uffae\044\uffae\056\uffae" +
    "\062\uffae\063\uffae\064\uffae\065\uffae\001\002\000\004\065" +
    "\277\001\002\000\074\011\uffaf\012\uffaf\013\uffaf\014\uffaf" +
    "\020\uffaf\021\uffaf\031\uffaf\032\uffaf\034\uffaf\035\uffaf\036" +
    "\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\045\uffaf" +
    "\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054" +
    "\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\001\002" +
    "\000\022\003\303\012\144\044\151\056\145\062\140\063" +
    "\152\064\146\065\107\001\002\000\004\021\uffab\001\002" +
    "\000\004\021\304\001\002\000\004\021\uffaa\001\002\000" +
    "\074\011\uffad\012\uffad\013\uffad\014\uffad\020\uffad\021\uffad" +
    "\031\uffad\032\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040" +
    "\uffad\041\uffad\042\uffad\043\uffad\045\uffad\046\uffad\047\uffad" +
    "\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056" +
    "\uffad\057\uffad\060\uffad\061\uffad\001\002\000\032\003\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\015\uffbd\016\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\033\uffbd\065\uffbd\001\002\000\004" +
    "\065\107\001\002\000\004\013\310\001\002\000\004\014" +
    "\uffa2\001\002\000\006\013\uffb6\014\uffb6\001\002\000\006" +
    "\013\uffb5\014\uffb5\001\002\000\016\046\323\047\177\050" +
    "\201\051\175\052\176\053\203\001\002\000\022\012\144" +
    "\013\316\044\151\056\145\062\140\063\152\064\146\065" +
    "\107\001\002\000\004\013\317\001\002\000\006\013\uffb8" +
    "\014\uffb8\001\002\000\006\013\uffb7\014\uffb7\001\002\000" +
    "\020\012\uff77\044\uff77\056\uff77\062\uff77\063\uff77\064\uff77" +
    "\065\uff77\001\002\000\020\012\uff78\044\uff78\056\uff78\062" +
    "\uff78\063\uff78\064\uff78\065\uff78\001\002\000\020\012\144" +
    "\044\151\056\145\062\140\063\152\064\146\065\107\001" +
    "\002\000\020\012\uff79\044\uff79\056\uff79\062\uff79\063\uff79" +
    "\064\uff79\065\uff79\001\002\000\006\013\uffb3\014\uffb3\001" +
    "\002\000\006\003\071\065\013\001\002\000\004\013\uffd6" +
    "\001\002\000\010\011\uffd3\013\uffd3\020\330\001\002\000" +
    "\004\021\331\001\002\000\006\011\uffd2\013\uffd2\001\002" +
    "\000\006\007\uffd0\010\uffd0\001\002\000\004\065\336\001" +
    "\002\000\004\014\346\001\002\000\010\003\341\011\uffc7" +
    "\014\uffc7\001\002\000\012\003\uffc6\011\uffc6\014\uffc6\020" +
    "\337\001\002\000\004\021\340\001\002\000\010\003\uffc5" +
    "\011\uffc5\014\uffc5\001\002\000\006\011\uffc8\014\uffc8\001" +
    "\002\000\006\011\343\014\uffcb\001\002\000\006\003\344" +
    "\065\336\001\002\000\006\011\uffc9\014\uffc9\001\002\000" +
    "\006\011\uffca\014\uffca\001\002\000\012\003\uffcc\007\uffcc" +
    "\010\uffcc\065\uffcc\001\002\000\004\007\uffe5\001\002\000" +
    "\014\003\uffee\007\uffee\026\uffee\030\uffee\065\uffee\001\002" +
    "\000\012\005\056\010\352\017\uffdc\065\uffdc\001\002\000" +
    "\004\002\000\001\002\000\006\003\355\065\356\001\002" +
    "\000\006\011\365\014\uffec\001\002\000\006\011\363\014" +
    "\uffea\001\002\000\010\011\uffe9\014\uffe9\020\361\001\002" +
    "\000\004\014\360\001\002\000\014\003\uffef\007\uffef\026" +
    "\uffef\030\uffef\065\uffef\001\002\000\004\021\362\001\002" +
    "\000\006\011\uffe8\014\uffe8\001\002\000\006\003\355\065" +
    "\356\001\002\000\004\014\uffeb\001\002\000\006\003\355" +
    "\065\356\001\002\000\004\014\uffed\001\002\000\004\002" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\071\006\001\001\000\004\003\007" +
    "\001\001\000\012\006\016\012\013\015\014\056\010\001" +
    "\001\000\004\073\352\001\001\000\004\005\350\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\021\001\001\000\004\072\022\001\001\000\006\007" +
    "\025\010\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\036\010" +
    "\024\001\001\000\002\001\001\000\004\016\041\001\001" +
    "\000\004\056\346\001\001\000\004\074\042\001\001\000" +
    "\002\001\001\000\010\023\046\025\047\056\044\001\001" +
    "\000\004\076\332\001\001\000\002\001\001\000\004\004" +
    "\052\001\001\000\010\023\050\025\047\056\044\001\001" +
    "\000\002\001\001\000\004\005\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\057\020\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\061\056\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\022\072\030\071\031\073\056\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\075\031\073" +
    "\056\067\001\001\000\002\001\001\000\010\023\077\025" +
    "\047\056\044\001\001\000\004\075\100\001\001\000\002" +
    "\001\001\000\004\032\102\001\001\000\026\033\124\034" +
    "\116\035\125\036\112\037\111\040\110\041\126\046\114" +
    "\047\120\050\103\001\001\000\004\077\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\100\272\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\050\134\051\153\052\135\053\147" +
    "\055\140\057\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\261\001\001\000\026" +
    "\033\256\034\116\035\125\036\112\037\111\040\110\041" +
    "\126\046\114\047\120\050\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\040\131\041\126\044\132\050\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\045\136\050\134\051\153" +
    "\052\135\053\147\055\140\057\142\060\141\061\154\062" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\064\225\001\001\000\016\050\134\051\153" +
    "\052\135\053\147\055\140\057\215\001\001\000\014\050" +
    "\134\051\153\052\135\053\147\055\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\066\177\070\173\106" +
    "\201\001\001\000\004\056\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\110\155\001\001\000\002\001" +
    "\001\000\004\067\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\111\163\001\001\000" +
    "\002\001\001\000\006\050\134\052\164\001\001\000\002" +
    "\001\001\000\024\050\134\051\153\052\135\053\147\055" +
    "\140\057\142\060\141\061\166\062\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\050\134\051\153\052" +
    "\135\053\147\055\140\057\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\105\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\104\210" +
    "\001\001\000\002\001\001\000\004\065\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\107\206\001\001\000\010\050\134\051\207\052\135\001" +
    "\001\000\004\110\155\001\001\000\014\050\134\051\153" +
    "\052\135\053\147\055\211\001\001\000\002\001\001\000" +
    "\014\050\134\051\153\052\135\053\147\055\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\050\134\051\153\052\135\053\147\055\140" +
    "\057\226\001\001\000\002\001\001\000\022\050\134\051" +
    "\153\052\135\053\147\055\140\057\142\060\141\062\230" +
    "\001\001\000\002\001\001\000\012\040\131\041\126\044" +
    "\232\050\103\001\001\000\002\001\001\000\004\103\234" +
    "\001\001\000\026\033\235\034\116\035\125\036\112\037" +
    "\111\040\110\041\126\046\114\047\120\050\103\001\001" +
    "\000\002\001\001\000\020\043\240\050\134\051\153\052" +
    "\135\053\147\055\140\057\237\001\001\000\004\102\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\043\245\050\134\051\153" +
    "\052\135\053\147\055\140\057\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\050\134\051\153\052\135" +
    "\053\147\055\140\057\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\033" +
    "\260\034\116\035\125\036\112\037\111\040\110\041\126" +
    "\046\114\047\120\050\103\001\001\000\002\001\001\000" +
    "\026\033\124\034\116\035\125\036\112\037\111\040\110" +
    "\041\126\046\114\047\120\050\103\001\001\000\002\001" +
    "\001\000\024\050\134\051\153\052\135\053\147\055\140" +
    "\057\142\060\141\061\264\062\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\273\001" +
    "\001\000\002\001\001\000\004\101\277\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\042\301\050\134\051" +
    "\153\052\135\053\147\055\140\057\300\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\306\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\063\321\066\320\070\317\001\001\000\020" +
    "\043\314\050\134\051\153\052\135\053\147\055\140\057" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\050" +
    "\134\051\153\052\135\053\147\055\140\057\323\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\325\031" +
    "\073\056\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\333\027\334\001\001\000\002\001\001\000\004" +
    "\024\341\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\344\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\057\020\060\001\001\000\002\001\001\000\006\013" +
    "\356\014\353\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\363\014\353" +
    "\001\001\000\002\001\001\000\006\013\365\014\353\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  Tab.init(); 

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    Symbol s = this.getScanner().next_token();
    if (s != null && s.value != null) 
            log.info(s.toString() + " " + s.value.toString());
    return s;

    }

	
    CompilerImpl impl = new CompilerImpl() ;	

    Logger log = Logger.getLogger(getClass());
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      impl.reportError(message + info.toString());
    }
  
    public void syntax_error(Symbol cur_token) {
        impl.reportError("Wrong syntax, unknown token " + cur_token.toString() + " on line : " + cur_token.left);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        impl.reportFatalError(cur_token.toString());
    }
	
    public void report_error(String message, Object info){
        System.err.print(message);
        System.err.flush();
        if (info instanceof Symbol)
            System.err.println("Error : on line " + ((Symbol)info).left);
        else System.err.println("");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


    CompilerImpl impl = new CompilerImpl() ;	

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Relop ::= LEQ 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.le); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relop",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Relop ::= LT 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.lt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relop",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Relop ::= GEQ 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.ge); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relop",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Relop ::= GT 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.gt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relop",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Relop ::= NEQ 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.ne); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relop",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Relop ::= EQ 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.eq); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relop",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // MulopRight ::= ASSIGN_MOD 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.rem); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulopRight",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // MulopRight ::= ASSIGN_DIV 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.div); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulopRight",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // MulopRight ::= ASSIGN_MUL 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.mul); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulopRight",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // MulopLeft ::= NEW_OP 
            {
              Integer RESULT =null;
		 RESULT = new Integer(1234); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulopLeft",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // MulopLeft ::= MOD 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.rem); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulopLeft",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // MulopLeft ::= DIV 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.div); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulopLeft",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // MulopLeft ::= MUL 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.mul); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulopLeft",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // AddopRight ::= ASSIGN_MINUS 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.sub); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddopRight",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // AddopRight ::= ASSIGN_PLUS 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.add); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddopRight",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // AddopLeft ::= SUB 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.sub); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddopLeft",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // AddopLeft ::= ADD 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.add); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddopLeft",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Assignop ::= MulopRight 
            {
              Integer RESULT =null;
		int opCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer opCode = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = opCode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignop",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Assignop ::= AddopRight 
            {
              Integer RESULT =null;
		int opCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer opCode = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = opCode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignop",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Assignop ::= ASSIGN 
            {
              Integer RESULT =null;
		 RESULT = new Integer(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignop",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Factor ::= NEW Type 
            {
              Obj RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Factor ::= NEW Type LSQUARE Expr RSQUARE 
            {
              Obj RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = impl.loadArray(type, expr, typeleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Factor ::= LPAREN Expr RPAREN 
            {
              Obj RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = impl.loadExpression(expr, exprleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Factor ::= BOOL 
            {
              Obj RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.loadBoolean(bool,boolleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Factor ::= CHAR 
            {
              Obj RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.loadChar(c,cleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Factor ::= NUMBER 
            {
              Obj RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.loadInteger(num, numleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Factor ::= Designator LPAREN ActPars RPAREN 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = impl.loadMethod(des, desleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Factor ::= Designator LPAREN RPAREN 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Factor ::= Designator 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.loadDesignator(des, desleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Term ::= Term NT$15 MulopLeft NT$16 Factor 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int mulopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mulopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer mulop = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int factorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj factor = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.loadIfArray(factor,factorleft); RESULT = impl.mulLeft(term, mulop, factor, termleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$16 ::= 
            {
              Obj RESULT =(Obj) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mulopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mulopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer mulop = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.mulOpLeftCount++; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$15 ::= 
            {
              Obj RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.loadIfArray(term,termleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Term ::= Factor 
            {
              Obj RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj factor = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = factor; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TermList ::= TermList NT$13 AddopLeft NT$14 Term 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int termListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int addopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int addopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer addop = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.loadIfArray(term,termleft); RESULT = impl.addLeft(termList, addop, term, termListleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TermList",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$14 ::= 
            {
              Obj RESULT =(Obj) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int termListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int addopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int addopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer addop = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.addOpLeftCount++; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$13 ::= 
            {
              Obj RESULT =null;
		int termListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.loadIfArray(termList,termListleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TermList ::= Term 
            {
              Obj RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = term; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TermList",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TermListExt ::= TermList MulopRight NT$12 TermListExt 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int termListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int mulopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mulopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer mulop = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int termListExtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termListExtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj termListExt = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.mulRight(termList, mulop, termListExt, termListleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TermListExt",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$12 ::= 
            {
              Obj RESULT =null;
		int termListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mulopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mulopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer mulop = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.mulOpRightCount++; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // TermListExt ::= TermList AddopRight NT$11 TermListExt 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int termListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int addopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int addopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer addop = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int termListExtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termListExtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj termListExt = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.addRight(termList, addop, termListExt, termListleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TermListExt",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$11 ::= 
            {
              Obj RESULT =null;
		int termListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int addopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int addopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer addop = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.addOpRightCount++; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TermListExt ::= TermList 
            {
              Obj RESULT =null;
		int termListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.checkTermListForArray(termList, termListleft); RESULT = termList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TermListExt",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Expr ::= SUB TermListExt 
            {
              Struct RESULT =null;
		int termListExtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termListExtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj termListExt = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = termListExt.getType(); Code.put(Code.neg); impl.fromDesignator = false; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Expr ::= TermListExt 
            {
              Struct RESULT =null;
		int termListExtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termListExtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj termListExt = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (termListExt!=null)?termListExt.getType():null; impl.fromDesignator = false; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CondFact ::= Expr Relop Expr 
            {
              Struct RESULT =null;
		int exprLeftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprLeftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Struct exprLeft = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int relopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int relopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer relop = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exprRightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprRightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct exprRight = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.checkConditionTypes(exprLeft, exprRight, exprLeftleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CondFact",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CondFact ::= Expr 
            {
              Struct RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CondFact",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CondTerm ::= CondFact AND CondTerm 
            {
              Struct RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CondTerm",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CondTerm ::= CondFact 
            {
              Struct RESULT =null;
		int condFactleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int condFactright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct condFact = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = condFact;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CondTerm",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Condition ::= error 
            {
              Struct RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery. Line ", errleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Condition ::= CondTerm OR Condition 
            {
              Struct RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Condition ::= CondTerm 
            {
              Struct RESULT =null;
		int condTermleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int condTermright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct condTerm = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.checkIfCondition(condTerm, condTermleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // IfCondition ::= IF LPAREN Condition RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfCondition",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // IfStatement ::= IfCondition Statement 
            {
              Object RESULT =null;
		int ifConditionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ifConditionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ifCondition = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ifStatementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifStatementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ifStatement = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStatement",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // IfStatement ::= IfCondition Statement ELSE Statement 
            {
              Object RESULT =null;
		int ifConditionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ifConditionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ifCondition = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ifStatementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ifStatementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ifStatement = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseStatementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseStatementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object elseStatement = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStatement",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ForStatementConditionExtension ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStatementConditionExtension",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ForStatementConditionExtension ::= Condition 
            {
              Object RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct condition = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.checkForCondition(condition, conditionleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStatementConditionExtension",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ForStatementDesignatorExtension ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStatementDesignatorExtension",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ForStatementDesignatorExtension ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStatementDesignatorExtension",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ForStatement ::= FOR LPAREN ForStatementDesignatorExtension SEMI_COMMA ForStatementConditionExtension SEMI_COMMA ForStatementDesignatorExtension RPAREN NT$10 Statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 impl.isInForStatement = false; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStatement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$10 ::= 
            {
              Object RESULT =null;
 impl.isInForStatement = true; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ReadStatement ::= READ LPAREN Designator RPAREN 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 impl.checkRead(des, desleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadStatement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ReturnStatement ::= RETURN Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.checkReturn(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ReturnStatement ::= RETURN 
            {
              Object RESULT =null;
		 impl.checkReturn(null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PrintStatement ::= PRINT LPAREN Expr COMMA NUMBER RPAREN 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 impl.checkPrint(expr, num, exprleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintStatement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PrintStatement ::= PRINT LPAREN Expr RPAREN 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 impl.checkPrint(expr, 1, exprleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintStatement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ActPars ::= Expr NT$9 COMMA ActPars 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActPars",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$9 ::= 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.reportInfo("Actual parameter detected. Line ", exprleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ActPars ::= Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; impl.reportInfo("Actual parameter detected. Line ", exprleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActPars",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DesignatorExtensionBracks ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery. Line ", errleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorExtensionBracks",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DesignatorExtensionBracks ::= Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.checkIfInt(expr, exprleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorExtensionBracks",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DesignatorExtension ::= 
            {
              Obj RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorExtension",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DesignatorExtension ::= DesignatorExtension LSQUARE NT$8 DesignatorExtensionBracks RSQUARE 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorExtension",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$8 ::= 
            {
              Obj RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 RESULT = impl.resolveArray(lleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DesignatorExtension ::= DesignatorExtension DOT IDENT 
            {
              Obj RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorExtension",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Designator ::= IDENT NT$7 DesignatorExtension 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int designatorExtensionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int designatorExtensionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj designatorExtension = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.resolveIdentificator(ident, designatorExtension, identleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Designator",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$7 ::= 
            {
              Obj RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.setArrayExtension(ident, identleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DesignatorAssign ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery. Line ", errleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorAssign",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DesignatorAssign ::= Designator NT$6 Assignop Expr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int desleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.assign(des, op, expr, desleft); impl.inAssign = false; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorAssign",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$6 ::= 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.inAssign = true; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DesignatorStatement ::= Designator DEC 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.designatorDec(des, desleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DesignatorStatement ::= Designator INC 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int incright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object inc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.designatorInc(des, desleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DesignatorStatement ::= Designator LPAREN ActPars RPAREN 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 if("main".equals(impl.currentMethod.getName())) impl.countElement(Position.GLOBAL_METHOD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DesignatorStatement ::= Designator LPAREN RPAREN 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = impl.designatorCall(des, null, desleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DesignatorStatement ::= DesignatorAssign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Statement ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Statement ::= IfStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Statement ::= BREAK SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Statement ::= CONTINUE SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Statement ::= ForStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Statement ::= ReadStatement SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Statement ::= ReturnStatement SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Statement ::= PrintStatement SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Statement ::= DesignatorStatement SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;
		 impl.countElement(Position.BLOCK_STATEMENTS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MethodVar ::= IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 impl.defineVar(name, DefinitionScope.LOCAL, true, nameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVar",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MethodVar ::= IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.defineVar(name, DefinitionScope.LOCAL, false, nameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVar",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MethodVarListAdditional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVarListAdditional",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MethodVarListAdditional ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery. Line ", errleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVarListAdditional",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MethodVarListAdditional ::= MethodVarListAdditional COMMA error 
            {
              Object RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 impl.reportInfo("Successful error recovery. Line ", lineleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVarListAdditional",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MethodVarListAdditional ::= MethodVarListAdditional COMMA MethodVar 
            {
              Object RESULT =null;
		 impl.countElement(Position.METHOD_ARGUMENT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVarListAdditional",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MethodVarList ::= MethodVar MethodVarListAdditional 
            {
              Object RESULT =null;
		 impl.countElement(Position.METHOD_ARGUMENT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVarList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MethodVarDecl ::= Type NT$5 MethodVarList SEMI_COMMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVarDecl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$5 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.currentVarType = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MethodVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVarDeclList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MethodVarDeclList ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery on line ", errleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVarDeclList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MethodVarDeclList ::= error SEMI_COMMA 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 impl.reportInfo("Successful error recovery on line ", errleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVarDeclList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MethodVarDeclList ::= MethodVarDecl MethodVarDeclList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodVarDeclList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FormalParamDecl ::= Type IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 impl.currentVarType = type; impl.defineVar(name, DefinitionScope.ELSE, true, nameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FormalParamDecl ::= Type IDENT 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.currentVarType = type; impl.defineVar(name, DefinitionScope.ELSE, false, nameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FormalParamList ::= FormalParamDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParamList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FormalParamList ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery on line ", errleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParamList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FormalParamList ::= error COMMA FormalParamList 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 impl.reportInfo("Successful error recovery on line ", errleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParamList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FormalParamList ::= FormalParamDecl COMMA FormalParamList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParamList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FormPars ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormPars",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FormPars ::= FormalParamList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormPars",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodReturnType ::= VOID IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.currentMethodName=name; impl.currentMethodType = null; impl.currentMethodNameLine=nameleft;  impl.defineMethod(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodReturnType",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MethodReturnType ::= Type IDENT 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.currentMethodName=name; impl.currentMethodType = type; impl.currentMethodNameLine=nameleft; impl.defineMethod(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodReturnType",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MethodStatic ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodStatic",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MethodStatic ::= STATIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodStatic",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MethodDecl ::= MethodStatic MethodReturnType LPAREN FormPars RPAREN MethodVarDeclList NT$4 LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int methodReturnTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int methodReturnTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object methodReturnType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 impl.endMethod(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$4 ::= 
            {
              Object RESULT =null;
		int methodReturnTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int methodReturnTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object methodReturnType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
 impl.startMethod(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MethodList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MethodList ::= MethodList MethodDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MethodListExt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodListExt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MethodListExt ::= LBRACE MethodList RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodListExt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassExtended ::= 
            {
              Object RESULT =null;
		 impl.currentExtendedClassType = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassExtended",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassExtended ::= EXTENDS Type 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.currentExtendedClassType = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassExtended",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassDecl ::= CLASS IDENT ClassExtended NT$3 LBRACE MethodVarDeclList MethodListExt RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 impl.endClass(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$3 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 impl.startClass(name, nameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // GlobalVar ::= IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 impl.defineVar(name, DefinitionScope.GLOBAL, true, nameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVar",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // GlobalVar ::= IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.defineVar(name, DefinitionScope.GLOBAL, false, nameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVar",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // GlobalVarList ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery. Line", errleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // GlobalVarList ::= error COMMA GlobalVarList 
            {
              Object RESULT =null;
		int globalVarListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int globalVarListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object globalVarList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery. Line ", globalVarListleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // GlobalVarList ::= GlobalVar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GlobalVarList ::= GlobalVar COMMA GlobalVarList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GlobalVarDecl ::= error SEMI_COMMA 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 impl.reportInfo("Successful error recovery. Line ", errleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GlobalVarDecl ::= Type NT$2 GlobalVarList SEMI_COMMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$2 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.currentVarType = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstValue ::= BOOL 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = value; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstValue",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstValue ::= CHAR 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character value = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = value; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstValue",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstValue ::= NUMBER 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = value; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstValue",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Constant ::= IDENT ASSIGN ConstValue 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.defineConst(name, value, nameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstList ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.reportError("Successful error recovery on line ", errleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstList ::= Constant COMMA ConstList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstList ::= Constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl ::= CONST Type NT$1 ConstList SEMI_COMMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.currentConstType = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.resolveType(type, typeleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalParamList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalParamList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalParamList ::= GlobalParamList ClassDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalParamList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GlobalParamList ::= GlobalParamList GlobalVarDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalParamList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GlobalParamList ::= GlobalParamList ConstDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalParamList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= PROG IDENT NT$0 GlobalParamList LBRACE MethodList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 impl.endProgram(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.startProgram(name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

