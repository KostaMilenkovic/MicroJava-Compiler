
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jan 10 12:27:01 CET 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.ac.bg.etf.pp1.impl.CompilerImpl;
import rs.etf.pp1.mj.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jan 10 12:27:01 CET 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\006\000\002\002\004\000\002\003" +
    "\003\000\002\004\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\002\000\002\072\002\000\002" +
    "\067\007\000\002\070\005\000\002\070\003\000\002\071" +
    "\005\000\002\073\002\000\002\007\006\000\002\010\005" +
    "\000\002\010\003\000\002\011\003\000\002\011\005\000" +
    "\002\074\002\000\002\012\012\000\002\013\004\000\002" +
    "\013\002\000\002\014\005\000\002\014\002\000\002\015" +
    "\004\000\002\015\002\000\002\075\002\000\002\016\014" +
    "\000\002\017\003\000\002\017\002\000\002\020\004\000" +
    "\002\020\004\000\002\021\003\000\002\021\002\000\002" +
    "\022\003\000\002\022\005\000\002\023\004\000\002\023" +
    "\006\000\002\063\004\000\002\063\002\000\002\076\002" +
    "\000\002\064\006\000\002\065\003\000\002\065\005\000" +
    "\002\066\003\000\002\066\005\000\002\024\004\000\002" +
    "\024\002\000\002\025\003\000\002\025\003\000\002\026" +
    "\004\000\002\026\004\000\002\026\004\000\002\026\004" +
    "\000\002\026\007\000\002\026\007\000\002\026\011\000" +
    "\002\027\003\000\002\027\003\000\002\027\005\000\002" +
    "\030\004\000\002\030\003\000\002\077\002\000\002\031" +
    "\007\000\002\031\004\000\002\032\006\000\002\033\003" +
    "\000\002\033\005\000\002\034\003\000\002\034\005\000" +
    "\002\035\003\000\002\035\005\000\002\036\004\000\002" +
    "\037\012\000\002\040\003\000\002\040\002\000\002\041" +
    "\005\000\002\041\006\000\002\041\004\000\002\041\004" +
    "\000\002\057\005\000\002\057\003\000\002\045\004\000" +
    "\002\045\003\000\002\046\005\000\002\046\003\000\002" +
    "\060\003\000\002\061\005\000\002\061\003\000\002\062" +
    "\003\000\002\062\005\000\002\062\006\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\004\000" +
    "\002\062\007\000\002\062\005\000\002\042\003\000\002" +
    "\043\005\000\002\043\003\000\002\044\006\000\002\044" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\050\003\000\002\050\003\000\002\051\003\000\002\051" +
    "\003\000\002\052\003\000\002\052\003\000\002\053\003" +
    "\000\002\053\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\325\000\004\004\005\001\002\000\004\002\327\001" +
    "\002\000\004\062\007\001\002\000\014\002\ufff7\005\ufff7" +
    "\036\ufff7\040\ufff7\062\ufff7\001\002\000\014\002\uffff\005" +
    "\uffff\036\uffff\040\uffff\062\uffff\001\002\000\014\002\uffe6" +
    "\005\012\036\020\040\021\062\013\001\002\000\004\062" +
    "\ufff1\001\002\000\012\006\uffe4\015\uffe4\016\uffe4\062\uffe4" +
    "\001\002\000\064\005\ufffe\007\ufffe\011\ufffe\012\ufffe\017" +
    "\ufffe\020\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe" +
    "\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\051" +
    "\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\060\ufffe\061\ufffe" +
    "\062\ufffe\001\002\000\014\002\ufff9\005\ufff9\036\ufff9\040" +
    "\ufff9\062\ufff9\001\002\000\004\002\001\001\002\000\014" +
    "\002\ufffa\005\ufffa\036\ufffa\040\ufffa\062\ufffa\001\002\000" +
    "\014\002\ufff8\005\ufff8\036\ufff8\040\ufff8\062\ufff8\001\002" +
    "\000\004\062\037\001\002\000\004\062\013\001\002\000" +
    "\004\062\ufff6\001\002\000\004\062\025\001\002\000\006" +
    "\007\ufff3\012\035\001\002\000\004\022\030\001\002\000" +
    "\004\007\027\001\002\000\014\002\ufff5\005\ufff5\036\ufff5" +
    "\040\ufff5\062\ufff5\001\002\000\010\030\032\063\034\064" +
    "\033\001\002\000\006\007\ufff2\012\ufff2\001\002\000\006" +
    "\007\ufffd\012\ufffd\001\002\000\006\007\ufffb\012\ufffb\001" +
    "\002\000\006\007\ufffc\012\ufffc\001\002\000\004\062\025" +
    "\001\002\000\004\007\ufff4\001\002\000\006\005\uffeb\037" +
    "\uffeb\001\002\000\006\005\uffe8\037\041\001\002\000\004" +
    "\062\013\001\002\000\004\005\043\001\002\000\010\005" +
    "\uffd6\006\uffd6\062\uffd6\001\002\000\010\005\012\006\uffe6" +
    "\062\013\001\002\000\004\062\uffd5\001\002\000\004\006" +
    "\050\001\002\000\010\005\uffd7\006\uffd7\062\uffd7\001\002" +
    "\000\014\002\uffea\005\uffea\036\uffea\040\uffea\062\uffea\001" +
    "\002\000\004\062\054\001\002\000\006\007\uffd3\012\060" +
    "\001\002\000\004\007\057\001\002\000\010\007\uffd1\012" +
    "\uffd1\017\055\001\002\000\004\020\056\001\002\000\006" +
    "\007\uffd0\012\uffd0\001\002\000\010\005\uffd4\006\uffd4\062" +
    "\uffd4\001\002\000\004\062\054\001\002\000\004\007\uffd2" +
    "\001\002\000\004\005\uffe9\001\002\000\012\006\065\015" +
    "\uffe0\016\064\062\uffe0\001\002\000\006\015\uffe1\062\uffe1" +
    "\001\002\000\006\002\uffe7\006\uffe7\001\002\000\006\015" +
    "\072\062\013\001\002\000\012\006\uffe5\015\uffe5\016\uffe5" +
    "\062\uffe5\001\002\000\004\010\075\001\002\000\004\062" +
    "\074\001\002\000\004\062\073\001\002\000\004\010\uffde" +
    "\001\002\000\004\010\uffdf\001\002\000\006\011\uffdc\062" +
    "\013\001\002\000\004\011\107\001\002\000\006\011\uffdb" +
    "\012\105\001\002\000\004\062\102\001\002\000\004\011" +
    "\uffdd\001\002\000\010\011\uffd9\012\uffd9\017\103\001\002" +
    "\000\004\020\104\001\002\000\006\011\uffd8\012\uffd8\001" +
    "\002\000\004\062\013\001\002\000\004\011\uffda\001\002" +
    "\000\006\005\uffd6\062\uffd6\001\002\000\006\005\uffe3\062" +
    "\013\001\002\000\004\005\112\001\002\000\026\005\uffce" +
    "\006\uffce\013\uffce\014\uffce\021\uffce\031\uffce\033\uffce\034" +
    "\uffce\035\uffce\062\uffce\001\002\000\026\005\130\006\121" +
    "\013\136\014\124\021\116\031\126\033\140\034\117\035" +
    "\135\062\120\001\002\000\024\010\306\022\302\023\174" +
    "\024\172\025\224\026\223\027\227\056\304\057\305\001" +
    "\002\000\030\005\uffcc\006\uffcc\013\uffcc\014\uffcc\021\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\062\uffcc\001" +
    "\002\000\004\010\275\001\002\000\004\007\274\001\002" +
    "\000\072\007\uff97\010\uff97\011\uff97\012\uff97\017\271\020" +
    "\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97" +
    "\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047" +
    "\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97\056\uff97" +
    "\057\uff97\060\uff97\061\uff97\001\002\000\012\006\uffe2\015" +
    "\uffe2\016\uffe2\062\uffe2\001\002\000\004\007\270\001\002" +
    "\000\004\007\267\001\002\000\022\007\uffc0\010\151\030" +
    "\154\050\157\052\153\062\120\063\155\064\164\001\002" +
    "\000\030\005\uffc4\006\uffc4\013\uffc4\014\uffc4\021\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\062\uffc4\001\002" +
    "\000\004\010\263\001\002\000\030\005\uffc3\006\uffc3\013" +
    "\uffc3\014\uffc3\021\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\062\uffc3\001\002\000\026\005\uffce\006\uffce\013" +
    "\uffce\014\uffce\021\uffce\031\uffce\033\uffce\034\uffce\035\uffce" +
    "\062\uffce\001\002\000\024\005\130\013\136\014\124\021" +
    "\116\031\126\033\140\034\117\035\135\062\120\001\002" +
    "\000\024\005\130\013\136\014\124\021\116\031\126\033" +
    "\140\034\117\035\135\062\120\001\002\000\070\007\uff99" +
    "\010\uff99\011\uff99\012\uff99\020\uff99\022\uff99\023\uff99\024" +
    "\uff99\025\uff99\026\uff99\027\uff99\041\uff99\042\uff99\043\uff99" +
    "\044\uff99\045\uff99\046\uff99\047\uff99\051\uff99\052\uff99\053" +
    "\uff99\054\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99" +
    "\001\002\000\070\007\uff9b\010\uff9b\011\uff9b\012\uff9b\020" +
    "\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b" +
    "\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047" +
    "\252\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b" +
    "\057\uff9b\060\uff9b\061\uff9b\001\002\000\004\007\251\001" +
    "\002\000\004\010\241\001\002\000\026\005\uffcf\006\uffcf" +
    "\013\uffcf\014\uffcf\021\uffcf\031\uffcf\033\uffcf\034\uffcf\035" +
    "\uffcf\062\uffcf\001\002\000\004\010\142\001\002\000\030" +
    "\005\uffcd\006\uffcd\013\uffcd\014\uffcd\021\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\062\uffcd\001\002\000\006" +
    "\007\uffb2\062\120\001\002\000\006\007\uffb3\011\uffb3\001" +
    "\002\000\004\007\145\001\002\000\020\010\151\030\154" +
    "\050\157\052\153\062\120\063\155\064\164\001\002\000" +
    "\060\007\uffa4\010\235\011\uffa4\012\uffa4\020\uffa4\023\uffa4" +
    "\024\uffa4\025\uffa4\026\uffa4\027\uffa4\041\uffa4\042\uffa4\043" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\051\uffa4\052\uffa4\053\uffa4" +
    "\054\uffa4\055\uffa4\060\uffa4\061\uffa4\001\002\000\056\007" +
    "\uffa5\011\uffa5\012\uffa5\020\uffa5\023\uffa5\024\uffa5\025\uffa5" +
    "\026\uffa5\027\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045" +
    "\uffa5\046\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5" +
    "\060\uffa5\061\uffa5\001\002\000\056\007\uffa7\011\uffa7\012" +
    "\uffa7\020\uffa7\023\uffa7\024\uffa7\025\224\026\223\027\227" +
    "\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\051" +
    "\uffa7\052\uffa7\053\231\054\226\055\225\060\uffa7\061\uffa7" +
    "\001\002\000\020\010\151\030\154\050\157\052\153\062" +
    "\120\063\155\064\164\001\002\000\012\007\uffb9\011\uffb9" +
    "\060\uffb9\061\217\001\002\000\016\010\151\030\154\050" +
    "\157\062\120\063\155\064\164\001\002\000\056\007\uffa1" +
    "\011\uffa1\012\uffa1\020\uffa1\023\uffa1\024\uffa1\025\uffa1\026" +
    "\uffa1\027\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1" +
    "\046\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\060" +
    "\uffa1\061\uffa1\001\002\000\056\007\uffa0\011\uffa0\012\uffa0" +
    "\020\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\041" +
    "\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\051\uffa0" +
    "\052\uffa0\053\uffa0\054\uffa0\055\uffa0\060\uffa0\061\uffa0\001" +
    "\002\000\026\007\uffb7\011\uffb7\041\207\042\214\043\211" +
    "\044\213\045\210\046\212\060\uffb7\061\uffb7\001\002\000" +
    "\004\062\013\001\002\000\042\007\uffa8\011\uffa8\012\uffa8" +
    "\020\uffa8\023\174\024\172\041\uffa8\042\uffa8\043\uffa8\044" +
    "\uffa8\045\uffa8\046\uffa8\051\176\052\173\060\uffa8\061\uffa8" +
    "\001\002\000\004\007\167\001\002\000\010\007\uffbb\011" +
    "\uffbb\060\165\001\002\000\032\007\uffaa\011\uffaa\012\uffaa" +
    "\020\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\060\uffaa\061\uffaa\001\002\000\056\007\uff9f\011\uff9f" +
    "\012\uff9f\020\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027" +
    "\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f" +
    "\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\060\uff9f\061" +
    "\uff9f\001\002\000\020\010\151\030\154\050\157\052\153" +
    "\062\120\063\155\064\164\001\002\000\006\007\uffba\011" +
    "\uffba\001\002\000\006\011\uffb2\062\120\001\002\000\004" +
    "\011\171\001\002\000\024\005\uffb4\013\uffb4\014\uffb4\021" +
    "\uffb4\031\uffb4\033\uffb4\034\uffb4\035\uffb4\062\uffb4\001\002" +
    "\000\020\010\uff88\030\uff88\050\uff88\052\uff88\062\uff88\063" +
    "\uff88\064\uff88\001\002\000\016\010\uff8a\030\uff8a\050\uff8a" +
    "\062\uff8a\063\uff8a\064\uff8a\001\002\000\020\010\uff89\030" +
    "\uff89\050\uff89\052\uff89\062\uff89\063\uff89\064\uff89\001\002" +
    "\000\016\010\uff8c\030\uff8c\050\uff8c\062\uff8c\063\uff8c\064" +
    "\uff8c\001\002\000\016\010\uff8b\030\uff8b\050\uff8b\062\uff8b" +
    "\063\uff8b\064\uff8b\001\002\000\016\010\uff8d\030\uff8d\050" +
    "\uff8d\062\uff8d\063\uff8d\064\uff8d\001\002\000\016\010\151" +
    "\030\154\050\157\062\120\063\155\064\164\001\002\000" +
    "\032\007\uffa9\011\uffa9\012\uffa9\020\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\044\uffa9\045\uffa9\046\uffa9\060\uffa9\061\uffa9\001" +
    "\002\000\060\007\uff9e\011\uff9e\012\uff9e\017\203\020\uff9e" +
    "\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\041\uff9e\042" +
    "\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\051\uff9e\052\uff9e" +
    "\053\uff9e\054\uff9e\055\uff9e\060\uff9e\061\uff9e\001\002\000" +
    "\020\010\151\030\154\050\157\052\153\062\120\063\155" +
    "\064\164\001\002\000\004\020\205\001\002\000\056\007" +
    "\uff9d\011\uff9d\012\uff9d\020\uff9d\023\uff9d\024\uff9d\025\uff9d" +
    "\026\uff9d\027\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045" +
    "\uff9d\046\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d" +
    "\060\uff9d\061\uff9d\001\002\000\020\010\151\030\154\050" +
    "\157\052\153\062\120\063\155\064\164\001\002\000\020" +
    "\010\uff93\030\uff93\050\uff93\052\uff93\062\uff93\063\uff93\064" +
    "\uff93\001\002\000\020\010\uff8e\030\uff8e\050\uff8e\052\uff8e" +
    "\062\uff8e\063\uff8e\064\uff8e\001\002\000\020\010\uff8f\030" +
    "\uff8f\050\uff8f\052\uff8f\062\uff8f\063\uff8f\064\uff8f\001\002" +
    "\000\020\010\uff90\030\uff90\050\uff90\052\uff90\062\uff90\063" +
    "\uff90\064\uff90\001\002\000\020\010\uff91\030\uff91\050\uff91" +
    "\052\uff91\062\uff91\063\uff91\064\uff91\001\002\000\020\010" +
    "\uff92\030\uff92\050\uff92\052\uff92\062\uff92\063\uff92\064\uff92" +
    "\001\002\000\012\007\uffb6\011\uffb6\060\uffb6\061\uffb6\001" +
    "\002\000\032\007\uffab\011\uffab\012\uffab\020\uffab\041\uffab" +
    "\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\060\uffab\061" +
    "\uffab\001\002\000\020\010\151\030\154\050\157\052\153" +
    "\062\120\063\155\064\164\001\002\000\010\007\uffb8\011" +
    "\uffb8\060\uffb8\001\002\000\004\011\222\001\002\000\056" +
    "\007\uff9c\011\uff9c\012\uff9c\020\uff9c\023\uff9c\024\uff9c\025" +
    "\uff9c\026\uff9c\027\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c" +
    "\045\uff9c\046\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055" +
    "\uff9c\060\uff9c\061\uff9c\001\002\000\020\010\uff84\030\uff84" +
    "\050\uff84\052\uff84\062\uff84\063\uff84\064\uff84\001\002\000" +
    "\020\010\uff85\030\uff85\050\uff85\052\uff85\062\uff85\063\uff85" +
    "\064\uff85\001\002\000\016\010\uff80\030\uff80\050\uff80\062" +
    "\uff80\063\uff80\064\uff80\001\002\000\016\010\uff81\030\uff81" +
    "\050\uff81\062\uff81\063\uff81\064\uff81\001\002\000\020\010" +
    "\uff83\030\uff83\050\uff83\052\uff83\062\uff83\063\uff83\064\uff83" +
    "\001\002\000\016\010\uff86\030\uff86\050\uff86\062\uff86\063" +
    "\uff86\064\uff86\001\002\000\016\010\uff82\030\uff82\050\uff82" +
    "\062\uff82\063\uff82\064\uff82\001\002\000\016\010\uff87\030" +
    "\uff87\050\uff87\062\uff87\063\uff87\064\uff87\001\002\000\016" +
    "\010\151\030\154\050\157\062\120\063\155\064\164\001" +
    "\002\000\056\007\uffa6\011\uffa6\012\uffa6\020\uffa6\023\uffa6" +
    "\024\uffa6\025\uffa6\026\uffa6\027\uffa6\041\uffa6\042\uffa6\043" +
    "\uffa6\044\uffa6\045\uffa6\046\uffa6\051\uffa6\052\uffa6\053\uffa6" +
    "\054\uffa6\055\uffa6\060\uffa6\061\uffa6\001\002\000\022\010" +
    "\151\011\237\030\154\050\157\052\153\062\120\063\155" +
    "\064\164\001\002\000\004\011\240\001\002\000\056\007" +
    "\uffa3\011\uffa3\012\uffa3\020\uffa3\023\uffa3\024\uffa3\025\uffa3" +
    "\026\uffa3\027\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045" +
    "\uffa3\046\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3" +
    "\060\uffa3\061\uffa3\001\002\000\056\007\uffa2\011\uffa2\012" +
    "\uffa2\020\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2" +
    "\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\051" +
    "\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\060\uffa2\061\uffa2" +
    "\001\002\000\020\010\151\030\154\050\157\052\153\062" +
    "\120\063\155\064\164\001\002\000\006\011\244\012\243" +
    "\001\002\000\004\030\246\001\002\000\004\007\245\001" +
    "\002\000\030\005\uffc6\006\uffc6\013\uffc6\014\uffc6\021\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\062\uffc6\001" +
    "\002\000\004\011\247\001\002\000\004\007\250\001\002" +
    "\000\030\005\uffc5\006\uffc5\013\uffc5\014\uffc5\021\uffc5\031" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\062\uffc5\001\002" +
    "\000\030\005\uffcb\006\uffcb\013\uffcb\014\uffcb\021\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\062\uffcb\001\002" +
    "\000\004\062\120\001\002\000\070\007\uff9a\010\uff9a\011" +
    "\uff9a\012\uff9a\020\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a" +
    "\026\uff9a\027\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045" +
    "\uff9a\046\uff9a\047\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a" +
    "\055\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\001\002\000" +
    "\030\005\uffb5\006\uffb5\013\uffb5\014\uffb5\021\uffb5\031\uffb5" +
    "\032\uffb5\033\uffb5\034\uffb5\035\uffb5\062\uffb5\001\002\000" +
    "\030\005\uffbd\006\uffbd\013\uffbd\014\uffbd\021\uffbd\031\uffbd" +
    "\032\256\033\uffbd\034\uffbd\035\uffbd\062\uffbd\001\002\000" +
    "\024\005\uffbf\013\uffbf\014\uffbf\021\uffbf\031\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\062\uffbf\001\002\000\024\005\130\013" +
    "\136\014\124\021\116\031\126\033\140\034\117\035\135" +
    "\062\120\001\002\000\030\005\uffbe\006\uffbe\013\uffbe\014" +
    "\uffbe\021\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\062\uffbe\001\002\000\026\005\130\006\262\013\136\014" +
    "\124\021\116\031\126\033\140\034\117\035\135\062\120" +
    "\001\002\000\030\005\uffc2\006\uffc2\013\uffc2\014\uffc2\021" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\062\uffc2" +
    "\001\002\000\020\010\151\030\154\050\157\052\153\062" +
    "\120\063\155\064\164\001\002\000\004\011\265\001\002" +
    "\000\024\005\uffbc\013\uffbc\014\uffbc\021\uffbc\031\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\062\uffbc\001\002\000\004\007\uffc1" +
    "\001\002\000\030\005\uffc9\006\uffc9\013\uffc9\014\uffc9\021" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\062\uffc9" +
    "\001\002\000\030\005\uffc8\006\uffc8\013\uffc8\014\uffc8\021" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\062\uffc8" +
    "\001\002\000\020\010\151\030\154\050\157\052\153\062" +
    "\120\063\155\064\164\001\002\000\004\020\273\001\002" +
    "\000\070\007\uff98\010\uff98\011\uff98\012\uff98\020\uff98\022" +
    "\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98\041\uff98" +
    "\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98\051" +
    "\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98" +
    "\060\uff98\061\uff98\001\002\000\030\005\uffca\006\uffca\013" +
    "\uffca\014\uffca\021\uffca\031\uffca\032\uffca\033\uffca\034\uffca" +
    "\035\uffca\062\uffca\001\002\000\004\062\120\001\002\000" +
    "\004\011\277\001\002\000\004\007\300\001\002\000\030" +
    "\005\uffc7\006\uffc7\013\uffc7\014\uffc7\021\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\062\uffc7\001\002\000\020" +
    "\010\151\030\154\050\157\052\153\062\120\063\155\064" +
    "\164\001\002\000\020\010\uff96\030\uff96\050\uff96\052\uff96" +
    "\062\uff96\063\uff96\064\uff96\001\002\000\020\010\uff94\030" +
    "\uff94\050\uff94\052\uff94\062\uff94\063\uff94\064\uff94\001\002" +
    "\000\006\007\uffaf\011\uffaf\001\002\000\006\007\uffae\011" +
    "\uffae\001\002\000\020\010\151\030\154\050\157\052\153" +
    "\062\120\063\155\064\164\001\002\000\020\010\uff95\030" +
    "\uff95\050\uff95\052\uff95\062\uff95\063\uff95\064\uff95\001\002" +
    "\000\006\011\uffac\012\313\001\002\000\004\011\312\001" +
    "\002\000\006\007\uffb0\011\uffb0\001\002\000\020\010\151" +
    "\030\154\050\157\052\153\062\120\063\155\064\164\001" +
    "\002\000\004\011\uffad\001\002\000\006\007\uffb1\011\uffb1" +
    "\001\002\000\004\062\320\001\002\000\006\007\uffee\012" +
    "\325\001\002\000\010\007\uffed\012\uffed\017\323\001\002" +
    "\000\004\007\322\001\002\000\014\002\ufff0\005\ufff0\036" +
    "\ufff0\040\ufff0\062\ufff0\001\002\000\004\020\324\001\002" +
    "\000\006\007\uffec\012\uffec\001\002\000\004\062\320\001" +
    "\002\000\004\007\uffef\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\325\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\005\001\001\000\004\006\007\001\001\000\002" +
    "\001\001\000\014\004\010\007\016\012\015\014\014\067" +
    "\013\001\001\000\004\073\315\001\001\000\004\015\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\021\001\001\000\004\072\022\001\001\000" +
    "\006\070\025\071\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\070\035\071\023\001" +
    "\001\000\002\001\001\000\004\074\037\001\001\000\004" +
    "\013\041\001\001\000\004\004\061\001\001\000\002\001" +
    "\001\000\004\063\043\001\001\000\010\004\044\014\045" +
    "\064\046\001\001\000\004\076\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\065\052" +
    "\066\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\065\060\066\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\066\017\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\070\020" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\077\021\075\022\100\023\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\077\022\105\023\076\001\001\000" +
    "\002\001\001\000\004\063\107\001\001\000\010\004\044" +
    "\064\046\075\110\001\001\000\002\001\001\000\004\024" +
    "\112\001\001\000\032\025\136\026\140\027\114\030\122" +
    "\031\124\032\130\036\126\037\131\041\121\042\113\043" +
    "\133\044\132\001\001\000\010\047\300\052\306\055\302" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\042\145\043\133\044\132\045" +
    "\265\046\162\060\157\061\147\062\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\260\001\001\000\032\025\254\026\140\027\114\030\122" +
    "\031\124\032\130\036\126\037\131\041\121\042\113\043" +
    "\133\044\132\001\001\000\032\025\253\026\140\027\114" +
    "\030\122\031\124\032\130\036\126\037\131\041\121\042" +
    "\113\043\133\044\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\040\143" +
    "\041\142\042\113\043\133\044\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\033\160\034\161\035\151" +
    "\042\145\043\133\044\132\045\155\046\162\060\157\061" +
    "\147\062\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\053\232\054\231\055\227\001\001\000\022\042" +
    "\145\043\133\044\132\045\220\046\162\060\157\061\147" +
    "\062\146\001\001\000\002\001\001\000\020\042\145\043" +
    "\133\044\132\046\215\060\157\061\147\062\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\205\001" +
    "\001\000\004\004\201\001\001\000\010\050\177\051\176" +
    "\052\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\033\165\034\161" +
    "\035\151\042\145\043\133\044\132\045\155\046\162\060" +
    "\157\061\147\062\146\001\001\000\002\001\001\000\014" +
    "\040\167\041\142\042\113\043\133\044\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\042\145\043\133\044\132" +
    "\046\200\060\157\061\147\062\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\042\145\043\133\044\132" +
    "\045\203\046\162\060\157\061\147\062\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\042\145\043\133" +
    "\044\132\045\214\046\162\060\157\061\147\062\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\034\217\035\151" +
    "\042\145\043\133\044\132\045\155\046\162\060\157\061" +
    "\147\062\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\042" +
    "\145\043\133\044\132\062\233\001\001\000\002\001\001" +
    "\000\022\042\145\043\133\044\132\045\235\046\162\060" +
    "\157\061\147\062\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\042\145\043\133\044" +
    "\132\045\241\046\162\060\157\061\147\062\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\077\256\001\001\000\032\025\257\026\140\027\114\030" +
    "\122\031\124\032\130\036\126\037\131\041\121\042\113" +
    "\043\133\044\132\001\001\000\002\001\001\000\032\025" +
    "\136\026\140\027\114\030\122\031\124\032\130\036\126" +
    "\037\131\041\121\042\113\043\133\044\132\001\001\000" +
    "\002\001\001\000\030\033\263\034\161\035\151\042\145" +
    "\043\133\044\132\045\155\046\162\060\157\061\147\062" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\042" +
    "\145\043\133\044\132\045\271\046\162\060\157\061\147" +
    "\062\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\042\275\043\133\044\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\042\145\043\133\044\132\045\314\046\162\060\157" +
    "\061\147\062\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\042\145" +
    "\043\133\044\132\045\307\046\162\057\310\060\157\061" +
    "\147\062\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\042\145\043" +
    "\133\044\132\045\307\046\162\057\313\060\157\061\147" +
    "\062\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\320\011\316\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\325\011\316\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  Tab.init(); 
  

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	
	
	
	Logger log = Logger.getLogger(getClass());
   
    //REDEFINE LOGGER METHODS
    //======================================================================================
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSyntax error : ", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Error : parsing has to be stopped", cur_token);
    }

    public void report_error(String message, Object info)
      {
        System.err.print(message);
        System.err.flush();
        if (info instanceof Symbol)
                  System.err.println("Error : on line " + ((Symbol)info).left);
        else System.err.println("");
      }

    //======================================================================================

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	CompilerImpl impl = new CompilerImpl() ;
	

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // MulOpLeft ::= MOD 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.rem); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // MulOpLeft ::= DIV 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.div); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // MulOpLeft ::= MUL 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.mul); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // MulOpRight ::= ASSIGN_MOD 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.rem); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOpRight",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // MulOpRight ::= ASSIGN_DIV 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.div); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOpRight",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // MulOpRight ::= ASSIGN_MUL 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.mul); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOpRight",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // MulOp ::= MulOpRight 
            {
              Object RESULT =null;
		int intOpCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intOpCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object intOpCode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = intOpCode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // MulOp ::= MulOpLeft 
            {
              Object RESULT =null;
		int intOpCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intOpCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object intOpCode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = intOpCode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // AddOpRight ::= ASSIGN_SUB 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.sub); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOpRight",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // AddOpRight ::= ASSIGN_ADD 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.add); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOpRight",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // AddOpLeft ::= SUB 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.sub); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOpLeft",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // AddOpLeft ::= ADD 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.add); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOpLeft",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // AddOp ::= AddOpRight 
            {
              Object RESULT =null;
		int intOpCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intOpCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object intOpCode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = intOpCode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // AddOp ::= AddOpLeft 
            {
              Object RESULT =null;
		int intOpCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intOpCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object intOpCode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = intOpCode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // RelOp ::= BLS 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.lt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // RelOp ::= BGR 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.gt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // RelOp ::= BLE 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.le); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // RelOp ::= BGE 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.ge); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // RelOp ::= NEQ 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.ne); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // RelOp ::= EQ 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.eq); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // AssignOp ::= MulOpRight 
            {
              Object RESULT =null;
		int intOpCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intOpCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object intOpCode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = intOpCode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // AssignOp ::= AddOpRight 
            {
              Object RESULT =null;
		int intOpCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intOpCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object intOpCode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = intOpCode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // AssignOp ::= ASSIGN 
            {
              Object RESULT =null;
		 RESULT = new Integer(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DesignatorRight ::= IDENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorRight",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DesignatorRight ::= IDENT LSQUARE ExpressionWithSign RSQUARE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = impl.getArrayElem(id,ex,idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorRight",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DesignatorRightList ::= DesignatorRight 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.getObj((String)id,idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorRightList",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DesignatorRightList ::= DesignatorRightList DOT DesignatorRight 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorRightList",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Designator ::= DesignatorRightList 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=obj; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Designator",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Factor ::= LPAREN ExpressionWithSign RPAREN 
            {
              Object RESULT =null;
		int structExprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int structExprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object structExpr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = structExpr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Factor ::= NEW Type LSQUARE ExpressionWithSign RSQUARE 
            {
              Object RESULT =null;
		int structTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int structTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object structType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int objExprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int objExprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object objExpr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = impl.createArray(structType,objExpr,structTypeleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Factor ::= NEW Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Factor ::= BOOLCONST 
            {
              Object RESULT =null;
		int boolConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean boolConst = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.loadConstBool(boolConst); RESULT = new Struct(Struct.Bool); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Factor ::= CHARCONST 
            {
              Object RESULT =null;
		int charConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int charConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character charConst = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.loadConstChar(charConst); RESULT = Tab.charType; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Factor ::= NUMBER 
            {
              Object RESULT =null;
		int integerConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int integerConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer integerConst = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.loadConstInteger(integerConst); RESULT = Tab.intType; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Factor ::= Designator LPAREN ExpressionWithSign RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Factor ::= Designator LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Factor ::= Designator 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.loadVariable(obj); RESULT = ((Obj)obj).getType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FactorList ::= Factor 
            {
              Object RESULT =null;
		int structTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int structTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object structType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = structType; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FactorList",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FactorList ::= FactorList MulOp Factor 
            {
              Object RESULT =null;
		int structFactorListTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int structFactorListTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object structFactorListType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int intOpCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int intOpCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object intOpCode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int structFactorTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int structFactorTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object structFactorType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.addOperation(structFactorListType,intOpCode,structFactorType,intOpCodeleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FactorList",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Term ::= FactorList 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = obj; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expression ::= Term 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = term; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expression ::= Term AddOp Expression 
            {
              Object RESULT =null;
		int structTermleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int structTermright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object structTerm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int intOpCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int intOpCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object intOpCode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int structExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int structExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object structExpression = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.addOperation(structTerm,intOpCode,structExpression,intOpCodeleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ExpressionWithSign ::= Expression 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = str; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionWithSign",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ExpressionWithSign ::= SUB Expression 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.checkInteger(str,strleft); impl.addNegation(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionWithSign",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ActualParameters ::= ExpressionWithSign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActualParameters",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ActualParameters ::= ExpressionWithSign COMMA ActualParameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActualParameters",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DesignatorStatement ::= Designator DEC 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.addDecrement(obj,lleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DesignatorStatement ::= Designator INC 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.addIncrement(obj,lleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DesignatorStatement ::= Designator LPAREN ActualParameters RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DesignatorStatement ::= Designator AssignOp ExpressionWithSign 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int structExprTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int structExprTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object structExprType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.addAssign(obj,op,structExprType,objleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ForDesignatorStatement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForDesignatorStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ForDesignatorStatement ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForDesignatorStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ForCondition ::= FOR LPAREN ForDesignatorStatement SEMI_COMMA Condition SEMI_COMMA ForDesignatorStatement RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForCondition",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ForStatement ::= ForCondition Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStatement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ConditionFact ::= ExpressionWithSign RelOp ExpressionWithSign 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int integerOpCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int integerOpCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object integerOpCode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.addConditionFact(expr1,integerOpCode, expr2, integerOpCodeleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionFact",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ConditionFact ::= ExpressionWithSign 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.addConditionFact(expr1,expr1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionFact",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ConditionTerm ::= ConditionFact AND ConditionTerm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionTerm",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ConditionTerm ::= ConditionFact 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionTerm",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Condition ::= ConditionTerm OR Condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Condition ::= ConditionTerm 
            {
              Object RESULT =null;
		 impl.addConditionTerm(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IfCondition ::= IF LPAREN Condition RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfCondition",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IfStatement ::= IfCondition Statement 
            {
              Object RESULT =null;
		 impl.endIf(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStatement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IfStatement ::= IfCondition Statement ELSE NT$5 Statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 impl.endIf(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStatement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$5 ::= 
            {
              Object RESULT =null;
 impl.endIfPart(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ReturnStatement ::= RETURN 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.returnMatched(Tab.noType,lleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ReturnStatement ::= RETURN ExpressionWithSign 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.returnMatched(str,lleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // StatementComplex ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementComplex",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // StatementComplex ::= ForStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementComplex",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // StatementComplex ::= IfStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementComplex",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // StatementSimple ::= PRINT LPAREN ExpressionWithSign COMMA NUMBER RPAREN SEMI_COMMA 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer len = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 impl.addPrint(str, len, strleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementSimple",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // StatementSimple ::= PRINT LPAREN ExpressionWithSign RPAREN SEMI_COMMA 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 impl.addPrint(str, 0, strleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementSimple",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // StatementSimple ::= READ LPAREN Designator RPAREN SEMI_COMMA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 impl.addRead(d, dleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementSimple",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // StatementSimple ::= DesignatorStatement SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementSimple",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // StatementSimple ::= ReturnStatement SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementSimple",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // StatementSimple ::= CONTINUE SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementSimple",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // StatementSimple ::= BREAK SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementSimple",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Statement ::= StatementComplex 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Statement ::= StatementSimple 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LocalVar ::= IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 impl.defineArray(vName, false, vNameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVar",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LocalVar ::= IDENT 
            {
              Object RESULT =null;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.defineVar(vName, false, vNameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVar",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LocalVarList ::= LocalVar COMMA LocalVarList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVarList",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LocalVarList ::= LocalVar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVarList",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LocalVarListExt ::= Type NT$4 LocalVarList SEMI_COMMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tName = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVarListExt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$4 ::= 
            {
              Object RESULT =null;
		int tNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tName = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.setCurrentType(tName); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LocalVarWrapper ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVarWrapper",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LocalVarWrapper ::= LocalVarWrapper LocalVarListExt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVarWrapper",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodArg ::= Type IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodArg",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodArg ::= Type IDENT 
            {
              Object RESULT =null;
		int structTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int structTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object structType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stringIdNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringIdNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String stringIdName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.defineMethodArg(structType, stringIdName, stringIdNameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodArg",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodArgList ::= MethodArg COMMA MethodArgList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodArgList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MethodArgList ::= MethodArg 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodArgList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MethodArgWrapper ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodArgWrapper",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MethodArgWrapper ::= MethodArgList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodArgWrapper",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MethodReturnType ::= VOID IDENT 
            {
              Object RESULT =null;
		int stringTypeNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringTypeNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String stringTypeName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.defineMethod(null, stringTypeName, stringTypeNameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodReturnType",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MethodReturnType ::= Type IDENT 
            {
              Object RESULT =null;
		int stringTypeNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stringTypeNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object stringTypeName = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stringIdNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringIdNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String stringIdName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.defineMethod(stringTypeName,stringIdName,stringIdNameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodReturnType",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MethodStatic ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodStatic",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MethodStatic ::= STATIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodStatic",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Method ::= MethodStatic MethodReturnType LPAREN MethodArgWrapper RPAREN LocalVarWrapper NT$3 LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.endMethod(lineleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$3 ::= 
            {
              Object RESULT =null;
 impl.enterMethod(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MethodList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MethodList ::= MethodList Method 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MethodListExt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodListExt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MethodListExt ::= LBRACE MethodList RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodListExt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ExtendedClass ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExtendedClass",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ExtendedClass ::= EXTENDS Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExtendedClass",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ClassDeclaration ::= CLASS IDENT NT$2 ExtendedClass LBRACE LocalVarWrapper MethodListExt RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int stringClassNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int stringClassNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String stringClassName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 impl.endClass(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$2 ::= 
            {
              Object RESULT =null;
		int stringClassNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringClassNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String stringClassName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.defineClass(stringClassName, stringClassNameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // GlobalVar ::= IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		int stringVarNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stringVarNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String stringVarName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 impl.defineArray(stringVarName, true, stringVarNameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVar",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GlobalVar ::= IDENT 
            {
              Object RESULT =null;
		int stringVarNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringVarNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String stringVarName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.defineVar(stringVarName,true,stringVarNameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVar",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GlobalVarList ::= GlobalVar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GlobalVarList ::= GlobalVar COMMA GlobalVarList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // GlobalVarDeclarationList ::= Type NT$1 GlobalVarList SEMI_COMMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int structTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int structTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object structType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVarDeclarationList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$1 ::= 
            {
              Object RESULT =null;
		int structTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int structTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object structType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.setCurrentType(structType); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstDecl ::= IDENT ASSIGN Value 
            {
              Object RESULT =null;
		int stringConstNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stringConstNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String stringConstName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int objectValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objectValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object objectValue = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.defineConst(stringConstName,objectValue,stringConstNameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDecl",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstList ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstList",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstList ::= ConstDecl COMMA ConstList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstList",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDeclarationList ::= CONST Type NT$0 ConstList SEMI_COMMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int structTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int structTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object structType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDeclarationList",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$0 ::= 
            {
              Object RESULT =null;
		int structTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int structTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object structType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.setCurrentType(structType); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GlobalDeclarationList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalDeclarationList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GlobalDeclarationList ::= GlobalDeclarationList GlobalVarDeclarationList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalDeclarationList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalDeclarationList ::= GlobalDeclarationList ConstDeclarationList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalDeclarationList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDeclarationList ::= GlobalDeclarationList ClassDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalDeclarationList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Value ::= BOOLCONST 
            {
              Object RESULT =null;
		int objectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean object = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = object; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Value ::= CHARCONST 
            {
              Object RESULT =null;
		int objectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character object = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = object; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Value ::= NUMBER 
            {
              Object RESULT =null;
		int objectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer object = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = object; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Type ::= IDENT 
            {
              Object RESULT =null;
		int stringTypeNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringTypeNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String stringTypeName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.findType(stringTypeName, stringTypeNameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramName ::= IDENT 
            {
              Object RESULT =null;
		int stringProgramNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringProgramNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String stringProgramName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.startProgram(stringProgramName); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgramName",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgramName GlobalDeclarationList MethodListExt 
            {
              Object RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object pName = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 impl.endProgram(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

