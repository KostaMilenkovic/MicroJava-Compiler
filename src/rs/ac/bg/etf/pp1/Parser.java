
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jan 20 23:08:50 CET 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.ac.bg.etf.pp1.impl.CompilerImpl;
import rs.etf.pp1.mj.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jan 20 23:08:50 CET 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\211\000\002\002\006\000\002\002\004\000\002\003" +
    "\003\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\002\000\002\067\002\000\002\064\007\000" +
    "\002\065\005\000\002\065\003\000\002\066\005\000\002" +
    "\004\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\070\002\000\002\007\006\000\002\010\005" +
    "\000\002\010\003\000\002\011\003\000\002\011\005\000" +
    "\002\071\002\000\002\012\012\000\002\013\004\000\002" +
    "\013\002\000\002\014\005\000\002\014\002\000\002\015" +
    "\004\000\002\015\002\000\002\072\002\000\002\016\014" +
    "\000\002\017\003\000\002\017\002\000\002\020\004\000" +
    "\002\020\004\000\002\021\003\000\002\021\002\000\002" +
    "\022\003\000\002\022\005\000\002\023\004\000\002\023" +
    "\006\000\002\060\004\000\002\060\002\000\002\073\002" +
    "\000\002\061\006\000\002\062\003\000\002\062\005\000" +
    "\002\063\003\000\002\063\005\000\002\024\004\000\002" +
    "\024\002\000\002\025\003\000\002\025\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\005\000\002\030\004" +
    "\000\002\030\003\000\002\074\002\000\002\031\007\000" +
    "\002\031\004\000\002\032\006\000\002\033\003\000\002" +
    "\033\005\000\002\034\003\000\002\034\005\000\002\035" +
    "\003\000\002\035\005\000\002\036\004\000\002\037\012" +
    "\000\002\040\003\000\002\040\002\000\002\026\004\000" +
    "\002\026\004\000\002\026\004\000\002\026\004\000\002" +
    "\026\007\000\002\026\007\000\002\026\011\000\002\075" +
    "\002\000\002\041\006\000\002\041\006\000\002\041\004" +
    "\000\002\041\004\000\002\042\005\000\002\042\003\000" +
    "\002\076\002\000\002\077\002\000\002\100\002\000\002" +
    "\043\011\000\002\043\003\000\002\044\005\000\002\044" +
    "\003\000\002\045\004\000\002\045\003\000\002\046\003" +
    "\000\002\101\002\000\002\046\006\000\002\102\002\000" +
    "\002\046\006\000\002\047\003\000\002\103\002\000\002" +
    "\104\002\000\002\047\007\000\002\050\003\000\002\105" +
    "\002\000\002\106\002\000\002\050\007\000\002\051\003" +
    "\000\002\051\005\000\002\051\006\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\004\000\002" +
    "\051\007\000\002\051\005\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\053\003\000\002\053\003\000\002" +
    "\054\003\000\002\054\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\004\004\005\001\002\000\004\002\340\001" +
    "\002\000\004\062\007\001\002\000\014\002\ufffb\005\ufffb" +
    "\036\ufffb\040\ufffb\062\ufffb\001\002\000\014\002\uffff\005" +
    "\uffff\036\uffff\040\uffff\062\uffff\001\002\000\014\002\uffe6" +
    "\005\012\036\020\040\021\062\013\001\002\000\004\062" +
    "\ufff1\001\002\000\012\006\uffe4\015\uffe4\016\uffe4\062\uffe4" +
    "\001\002\000\064\005\ufff5\007\ufff5\011\ufff5\012\ufff5\017" +
    "\ufff5\020\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5" +
    "\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\051" +
    "\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\060\ufff5\061\ufff5" +
    "\062\ufff5\001\002\000\014\002\ufffd\005\ufffd\036\ufffd\040" +
    "\ufffd\062\ufffd\001\002\000\004\002\001\001\002\000\014" +
    "\002\ufffe\005\ufffe\036\ufffe\040\ufffe\062\ufffe\001\002\000" +
    "\014\002\ufffc\005\ufffc\036\ufffc\040\ufffc\062\ufffc\001\002" +
    "\000\004\062\037\001\002\000\004\062\013\001\002\000" +
    "\004\062\ufffa\001\002\000\004\062\025\001\002\000\006" +
    "\007\ufff7\012\035\001\002\000\004\022\030\001\002\000" +
    "\004\007\027\001\002\000\014\002\ufff9\005\ufff9\036\ufff9" +
    "\040\ufff9\062\ufff9\001\002\000\010\030\032\063\034\064" +
    "\033\001\002\000\006\007\ufff6\012\ufff6\001\002\000\006" +
    "\007\ufff4\012\ufff4\001\002\000\006\007\ufff2\012\ufff2\001" +
    "\002\000\006\007\ufff3\012\ufff3\001\002\000\004\062\025" +
    "\001\002\000\004\007\ufff8\001\002\000\006\005\uffeb\037" +
    "\uffeb\001\002\000\006\005\uffe8\037\041\001\002\000\004" +
    "\062\013\001\002\000\004\005\043\001\002\000\010\005" +
    "\uffd6\006\uffd6\062\uffd6\001\002\000\010\005\012\006\uffe6" +
    "\062\013\001\002\000\004\062\uffd5\001\002\000\004\006" +
    "\050\001\002\000\010\005\uffd7\006\uffd7\062\uffd7\001\002" +
    "\000\014\002\uffea\005\uffea\036\uffea\040\uffea\062\uffea\001" +
    "\002\000\004\062\054\001\002\000\006\007\uffd3\012\060" +
    "\001\002\000\004\007\057\001\002\000\010\007\uffd1\012" +
    "\uffd1\017\055\001\002\000\004\020\056\001\002\000\006" +
    "\007\uffd0\012\uffd0\001\002\000\010\005\uffd4\006\uffd4\062" +
    "\uffd4\001\002\000\004\062\054\001\002\000\004\007\uffd2" +
    "\001\002\000\004\005\uffe9\001\002\000\012\006\065\015" +
    "\uffe0\016\064\062\uffe0\001\002\000\006\015\uffe1\062\uffe1" +
    "\001\002\000\006\002\uffe7\006\uffe7\001\002\000\006\015" +
    "\072\062\013\001\002\000\012\006\uffe5\015\uffe5\016\uffe5" +
    "\062\uffe5\001\002\000\004\010\075\001\002\000\004\062" +
    "\074\001\002\000\004\062\073\001\002\000\004\010\uffde" +
    "\001\002\000\004\010\uffdf\001\002\000\006\011\uffdc\062" +
    "\013\001\002\000\004\011\107\001\002\000\006\011\uffdb" +
    "\012\105\001\002\000\004\062\102\001\002\000\004\011" +
    "\uffdd\001\002\000\010\011\uffd9\012\uffd9\017\103\001\002" +
    "\000\004\020\104\001\002\000\006\011\uffd8\012\uffd8\001" +
    "\002\000\004\062\013\001\002\000\004\011\uffda\001\002" +
    "\000\006\005\uffd6\062\uffd6\001\002\000\006\005\uffe3\062" +
    "\013\001\002\000\004\005\112\001\002\000\026\005\uffce" +
    "\006\uffce\013\uffce\014\uffce\021\uffce\031\uffce\033\uffce\034" +
    "\uffce\035\uffce\062\uffce\001\002\000\026\005\130\006\121" +
    "\013\135\014\124\021\116\031\126\033\137\034\117\035" +
    "\134\062\120\001\002\000\026\010\314\022\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\026\uffb1\027\uffb1\047\214\056\311\057" +
    "\312\001\002\000\030\005\uffcc\006\uffcc\013\uffcc\014\uffcc" +
    "\021\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\062" +
    "\uffcc\001\002\000\004\010\305\001\002\000\004\007\304" +
    "\001\002\000\072\007\uffa6\010\uffa6\011\uffa6\012\uffa6\017" +
    "\uffaa\020\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6" +
    "\027\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\047\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6" +
    "\056\uffa6\057\uffa6\060\uffa6\061\uffa6\001\002\000\012\006" +
    "\uffe2\015\uffe2\016\uffe2\062\uffe2\001\002\000\004\007\275" +
    "\001\002\000\004\007\274\001\002\000\022\007\uffc7\010" +
    "\163\030\152\050\146\052\157\062\120\063\155\064\156" +
    "\001\002\000\030\005\uffcb\006\uffcb\013\uffcb\014\uffcb\021" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\062\uffcb" +
    "\001\002\000\004\010\270\001\002\000\030\005\uffca\006" +
    "\uffca\013\uffca\014\uffca\021\uffca\031\uffca\032\uffca\033\uffca" +
    "\034\uffca\035\uffca\062\uffca\001\002\000\026\005\uffce\006" +
    "\uffce\013\uffce\014\uffce\021\uffce\031\uffce\033\uffce\034\uffce" +
    "\035\uffce\062\uffce\001\002\000\024\005\130\013\135\014" +
    "\124\021\116\031\126\033\137\034\117\035\134\062\120" +
    "\001\002\000\024\005\130\013\135\014\124\021\116\031" +
    "\126\033\137\034\117\035\134\062\120\001\002\000\070" +
    "\007\uffab\010\uffab\011\uffab\012\uffab\020\uffab\022\uffab\023" +
    "\uffab\024\uffab\025\uffab\026\uffab\027\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\051\uffab\052" +
    "\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab" +
    "\061\uffab\001\002\000\004\007\260\001\002\000\004\010" +
    "\250\001\002\000\026\005\uffcf\006\uffcf\013\uffcf\014\uffcf" +
    "\021\uffcf\031\uffcf\033\uffcf\034\uffcf\035\uffcf\062\uffcf\001" +
    "\002\000\004\010\141\001\002\000\030\005\uffcd\006\uffcd" +
    "\013\uffcd\014\uffcd\021\uffcd\031\uffcd\032\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\062\uffcd\001\002\000\006\007\uffb9\062\120" +
    "\001\002\000\004\007\144\001\002\000\006\007\uffba\011" +
    "\uffba\001\002\000\020\010\163\030\152\050\146\052\157" +
    "\062\120\063\155\064\156\001\002\000\010\007\uffc2\011" +
    "\uffc2\060\246\001\002\000\004\062\013\001\002\000\050" +
    "\007\uffa1\011\uffa1\012\uffa1\020\uffa1\023\224\024\221\025" +
    "\223\026\226\027\230\041\uffa1\042\uffa1\043\uffa1\044\uffa1" +
    "\045\uffa1\046\uffa1\051\uff9b\052\uff9b\060\uffa1\061\uffa1\001" +
    "\002\000\062\007\uff94\010\213\011\uff94\012\uff94\020\uff94" +
    "\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94\041\uff94\042" +
    "\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\214\051\uff94" +
    "\052\uff94\053\uff94\054\uff94\055\uff94\060\uff94\061\uff94\001" +
    "\002\000\026\007\uffbe\011\uffbe\041\204\042\211\043\206" +
    "\044\210\045\205\046\207\060\uffbe\061\uffbe\001\002\000" +
    "\056\007\uff91\011\uff91\012\uff91\020\uff91\023\uff91\024\uff91" +
    "\025\uff91\026\uff91\027\uff91\041\uff91\042\uff91\043\uff91\044" +
    "\uff91\045\uff91\046\uff91\051\uff91\052\uff91\053\uff91\054\uff91" +
    "\055\uff91\060\uff91\061\uff91\001\002\000\004\007\200\001" +
    "\002\000\032\007\uffa2\011\uffa2\012\uffa2\020\uffa2\041\uffa2" +
    "\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\060\uffa2\061" +
    "\uffa2\001\002\000\056\007\uff90\011\uff90\012\uff90\020\uff90" +
    "\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90\041\uff90\042" +
    "\uff90\043\uff90\044\uff90\045\uff90\046\uff90\051\uff90\052\uff90" +
    "\053\uff90\054\uff90\055\uff90\060\uff90\061\uff90\001\002\000" +
    "\056\007\uff8f\011\uff8f\012\uff8f\020\uff8f\023\uff8f\024\uff8f" +
    "\025\uff8f\026\uff8f\027\uff8f\041\uff8f\042\uff8f\043\uff8f\044" +
    "\uff8f\045\uff8f\046\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f" +
    "\055\uff8f\060\uff8f\061\uff8f\001\002\000\016\010\163\030" +
    "\152\050\146\062\120\063\155\064\156\001\002\000\056" +
    "\007\uff98\011\uff98\012\uff98\020\uff98\023\uff98\024\uff98\025" +
    "\uff98\026\uff98\027\uff98\041\uff98\042\uff98\043\uff98\044\uff98" +
    "\045\uff98\046\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055" +
    "\uff98\060\uff98\061\uff98\001\002\000\012\007\uffc0\011\uffc0" +
    "\060\uffc0\061\175\001\002\000\056\007\uff9c\011\uff9c\012" +
    "\uff9c\020\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c" +
    "\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\051" +
    "\uff9c\052\uff9c\053\uff97\054\uff97\055\uff97\060\uff9c\061\uff9c" +
    "\001\002\000\020\010\163\030\152\050\146\052\157\062" +
    "\120\063\155\064\156\001\002\000\004\011\165\001\002" +
    "\000\056\007\uff8c\011\uff8c\012\uff8c\020\uff8c\023\uff8c\024" +
    "\uff8c\025\uff8c\026\uff8c\027\uff8c\041\uff8c\042\uff8c\043\uff8c" +
    "\044\uff8c\045\uff8c\046\uff8c\051\uff8c\052\uff8c\053\uff8c\054" +
    "\uff8c\055\uff8c\060\uff8c\061\uff8c\001\002\000\010\053\171" +
    "\054\172\055\167\001\002\000\016\010\uff79\030\uff79\050" +
    "\uff79\062\uff79\063\uff79\064\uff79\001\002\000\016\010\uff96" +
    "\030\uff96\050\uff96\062\uff96\063\uff96\064\uff96\001\002\000" +
    "\016\010\uff7b\030\uff7b\050\uff7b\062\uff7b\063\uff7b\064\uff7b" +
    "\001\002\000\016\010\uff7a\030\uff7a\050\uff7a\062\uff7a\063" +
    "\uff7a\064\uff7a\001\002\000\016\010\163\030\152\050\146" +
    "\062\120\063\155\064\156\001\002\000\056\007\uff95\011" +
    "\uff95\012\uff95\020\uff95\023\uff95\024\uff95\025\uff95\026\uff95" +
    "\027\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046" +
    "\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95\060\uff95" +
    "\061\uff95\001\002\000\020\010\163\030\152\050\146\052" +
    "\157\062\120\063\155\064\156\001\002\000\010\007\uffbf" +
    "\011\uffbf\060\uffbf\001\002\000\032\007\uffa3\011\uffa3\012" +
    "\uffa3\020\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3" +
    "\046\uffa3\060\uffa3\061\uffa3\001\002\000\006\011\uffb9\062" +
    "\120\001\002\000\004\011\202\001\002\000\024\005\uffbb" +
    "\013\uffbb\014\uffbb\021\uffbb\031\uffbb\033\uffbb\034\uffbb\035" +
    "\uffbb\062\uffbb\001\002\000\020\010\163\030\152\050\146" +
    "\052\157\062\120\063\155\064\156\001\002\000\020\010" +
    "\uff88\030\uff88\050\uff88\052\uff88\062\uff88\063\uff88\064\uff88" +
    "\001\002\000\020\010\uff83\030\uff83\050\uff83\052\uff83\062" +
    "\uff83\063\uff83\064\uff83\001\002\000\020\010\uff84\030\uff84" +
    "\050\uff84\052\uff84\062\uff84\063\uff84\064\uff84\001\002\000" +
    "\020\010\uff85\030\uff85\050\uff85\052\uff85\062\uff85\063\uff85" +
    "\064\uff85\001\002\000\020\010\uff86\030\uff86\050\uff86\052" +
    "\uff86\062\uff86\063\uff86\064\uff86\001\002\000\020\010\uff87" +
    "\030\uff87\050\uff87\052\uff87\062\uff87\063\uff87\064\uff87\001" +
    "\002\000\012\007\uffbd\011\uffbd\060\uffbd\061\uffbd\001\002" +
    "\000\022\010\163\011\217\030\152\050\146\052\157\062" +
    "\120\063\155\064\156\001\002\000\004\062\120\001\002" +
    "\000\070\007\uffac\010\uffac\011\uffac\012\uffac\020\uffac\022" +
    "\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\041\uffac" +
    "\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\051" +
    "\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac" +
    "\060\uffac\061\uffac\001\002\000\004\011\220\001\002\000" +
    "\056\007\uff93\011\uff93\012\uff93\020\uff93\023\uff93\024\uff93" +
    "\025\uff93\026\uff93\027\uff93\041\uff93\042\uff93\043\uff93\044" +
    "\uff93\045\uff93\046\uff93\051\uff93\052\uff93\053\uff93\054\uff93" +
    "\055\uff93\060\uff93\061\uff93\001\002\000\056\007\uff92\011" +
    "\uff92\012\uff92\020\uff92\023\uff92\024\uff92\025\uff92\026\uff92" +
    "\027\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046" +
    "\uff92\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92\060\uff92" +
    "\061\uff92\001\002\000\020\010\uff7f\030\uff7f\050\uff7f\052" +
    "\uff7f\062\uff7f\063\uff7f\064\uff7f\001\002\000\016\010\uff9e" +
    "\030\uff9e\050\uff9e\062\uff9e\063\uff9e\064\uff9e\001\002\000" +
    "\020\010\uff7e\030\uff7e\050\uff7e\052\uff7e\062\uff7e\063\uff7e" +
    "\064\uff7e\001\002\000\020\010\uff80\030\uff80\050\uff80\052" +
    "\uff80\062\uff80\063\uff80\064\uff80\001\002\000\016\010\uffa0" +
    "\030\uffa0\050\uffa0\062\uffa0\063\uffa0\064\uffa0\001\002\000" +
    "\020\010\uff7d\030\uff7d\050\uff7d\052\uff7d\062\uff7d\063\uff7d" +
    "\064\uff7d\001\002\000\006\051\232\052\231\001\002\000" +
    "\020\010\uff7c\030\uff7c\050\uff7c\052\uff7c\062\uff7c\063\uff7c" +
    "\064\uff7c\001\002\000\016\010\uff81\030\uff81\050\uff81\062" +
    "\uff81\063\uff81\064\uff81\001\002\000\016\010\uff82\030\uff82" +
    "\050\uff82\062\uff82\063\uff82\064\uff82\001\002\000\016\010" +
    "\uff9a\030\uff9a\050\uff9a\062\uff9a\063\uff9a\064\uff9a\001\002" +
    "\000\016\010\163\030\152\050\146\062\120\063\155\064" +
    "\156\001\002\000\056\007\uff99\011\uff99\012\uff99\020\uff99" +
    "\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99\041\uff99\042" +
    "\uff99\043\uff99\044\uff99\045\uff99\046\uff99\051\uff99\052\uff99" +
    "\053\uff97\054\uff97\055\uff97\060\uff99\061\uff99\001\002\000" +
    "\016\010\163\030\152\050\146\062\120\063\155\064\156" +
    "\001\002\000\032\007\uff9f\011\uff9f\012\uff9f\020\uff9f\041" +
    "\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\060\uff9f" +
    "\061\uff9f\001\002\000\016\010\163\030\152\050\146\062" +
    "\120\063\155\064\156\001\002\000\032\007\uff9d\011\uff9d" +
    "\012\uff9d\020\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045" +
    "\uff9d\046\uff9d\060\uff9d\061\uff9d\001\002\000\060\007\uff8e" +
    "\011\uff8e\012\uff8e\017\243\020\uff8e\023\uff8e\024\uff8e\025" +
    "\uff8e\026\uff8e\027\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e" +
    "\045\uff8e\046\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055" +
    "\uff8e\060\uff8e\061\uff8e\001\002\000\020\010\163\030\152" +
    "\050\146\052\157\062\120\063\155\064\156\001\002\000" +
    "\004\020\245\001\002\000\056\007\uff8d\011\uff8d\012\uff8d" +
    "\020\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\041" +
    "\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\051\uff8d" +
    "\052\uff8d\053\uff8d\054\uff8d\055\uff8d\060\uff8d\061\uff8d\001" +
    "\002\000\020\010\163\030\152\050\146\052\157\062\120" +
    "\063\155\064\156\001\002\000\006\007\uffc1\011\uffc1\001" +
    "\002\000\020\010\163\030\152\050\146\052\157\062\120" +
    "\063\155\064\156\001\002\000\006\011\253\012\252\001" +
    "\002\000\004\030\255\001\002\000\004\007\254\001\002" +
    "\000\030\005\uffb3\006\uffb3\013\uffb3\014\uffb3\021\uffb3\031" +
    "\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\062\uffb3\001\002" +
    "\000\004\011\256\001\002\000\004\007\257\001\002\000" +
    "\030\005\uffb2\006\uffb2\013\uffb2\014\uffb2\021\uffb2\031\uffb2" +
    "\032\uffb2\033\uffb2\034\uffb2\035\uffb2\062\uffb2\001\002\000" +
    "\030\005\uffb8\006\uffb8\013\uffb8\014\uffb8\021\uffb8\031\uffb8" +
    "\032\uffb8\033\uffb8\034\uffb8\035\uffb8\062\uffb8\001\002\000" +
    "\030\005\uffbc\006\uffbc\013\uffbc\014\uffbc\021\uffbc\031\uffbc" +
    "\032\uffbc\033\uffbc\034\uffbc\035\uffbc\062\uffbc\001\002\000" +
    "\030\005\uffc4\006\uffc4\013\uffc4\014\uffc4\021\uffc4\031\uffc4" +
    "\032\263\033\uffc4\034\uffc4\035\uffc4\062\uffc4\001\002\000" +
    "\024\005\uffc6\013\uffc6\014\uffc6\021\uffc6\031\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\062\uffc6\001\002\000\024\005\130\013" +
    "\135\014\124\021\116\031\126\033\137\034\117\035\134" +
    "\062\120\001\002\000\030\005\uffc5\006\uffc5\013\uffc5\014" +
    "\uffc5\021\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\062\uffc5\001\002\000\026\005\130\006\267\013\135\014" +
    "\124\021\116\031\126\033\137\034\117\035\134\062\120" +
    "\001\002\000\030\005\uffc9\006\uffc9\013\uffc9\014\uffc9\021" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\062\uffc9" +
    "\001\002\000\020\010\163\030\152\050\146\052\157\062" +
    "\120\063\155\064\156\001\002\000\004\011\272\001\002" +
    "\000\024\005\uffc3\013\uffc3\014\uffc3\021\uffc3\031\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\062\uffc3\001\002\000\004\007\uffc8" +
    "\001\002\000\030\005\uffb6\006\uffb6\013\uffb6\014\uffb6\021" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\062\uffb6" +
    "\001\002\000\030\005\uffb5\006\uffb5\013\uffb5\014\uffb5\021" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\062\uffb5" +
    "\001\002\000\004\017\277\001\002\000\020\010\uffa9\030" +
    "\uffa9\050\uffa9\052\uffa9\062\uffa9\063\uffa9\064\uffa9\001\002" +
    "\000\020\010\163\030\152\050\146\052\157\062\120\063" +
    "\155\064\156\001\002\000\004\020\uffa8\001\002\000\004" +
    "\020\303\001\002\000\070\007\uffa7\010\uffa7\011\uffa7\012" +
    "\uffa7\020\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7" +
    "\027\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046" +
    "\uffa7\047\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7" +
    "\056\uffa7\057\uffa7\060\uffa7\061\uffa7\001\002\000\030\005" +
    "\uffb7\006\uffb7\013\uffb7\014\uffb7\021\uffb7\031\uffb7\032\uffb7" +
    "\033\uffb7\034\uffb7\035\uffb7\062\uffb7\001\002\000\004\062" +
    "\120\001\002\000\006\011\307\047\214\001\002\000\004" +
    "\007\310\001\002\000\030\005\uffb4\006\uffb4\013\uffb4\014" +
    "\uffb4\021\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\062\uffb4\001\002\000\006\007\uffae\011\uffae\001\002\000" +
    "\006\007\uffad\011\uffad\001\002\000\016\022\323\023\224" +
    "\024\221\025\223\026\226\027\230\001\002\000\020\010" +
    "\163\030\152\050\146\052\157\062\120\063\155\064\156" +
    "\001\002\000\006\011\uffa4\012\320\001\002\000\004\011" +
    "\317\001\002\000\006\007\uffaf\011\uffaf\001\002\000\020" +
    "\010\163\030\152\050\146\052\157\062\120\063\155\064" +
    "\156\001\002\000\004\011\uffa5\001\002\000\020\010\163" +
    "\030\152\050\146\052\157\062\120\063\155\064\156\001" +
    "\002\000\020\010\uff8b\030\uff8b\050\uff8b\052\uff8b\062\uff8b" +
    "\063\uff8b\064\uff8b\001\002\000\020\010\uff89\030\uff89\050" +
    "\uff89\052\uff89\062\uff89\063\uff89\064\uff89\001\002\000\020" +
    "\010\uff8a\030\uff8a\050\uff8a\052\uff8a\062\uff8a\063\uff8a\064" +
    "\uff8a\001\002\000\006\007\uffb0\011\uffb0\001\002\000\004" +
    "\062\331\001\002\000\006\007\uffee\012\336\001\002\000" +
    "\010\007\uffed\012\uffed\017\334\001\002\000\004\007\333" +
    "\001\002\000\014\002\ufff0\005\ufff0\036\ufff0\040\ufff0\062" +
    "\ufff0\001\002\000\004\020\335\001\002\000\006\007\uffec" +
    "\012\uffec\001\002\000\004\062\331\001\002\000\004\007" +
    "\uffef\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\005\001\001\000\004\006\007\001\001\000\002" +
    "\001\001\000\014\004\010\007\016\012\015\014\014\064" +
    "\013\001\001\000\004\070\326\001\001\000\004\015\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\021\001\001\000\004\067\022\001\001\000" +
    "\006\065\025\066\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\065\035\066\023\001" +
    "\001\000\002\001\001\000\004\071\037\001\001\000\004" +
    "\013\041\001\001\000\004\004\061\001\001\000\002\001" +
    "\001\000\004\060\043\001\001\000\010\004\044\014\045" +
    "\061\046\001\001\000\004\073\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\062\052" +
    "\063\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\062\060\063\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\066\017\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\070\020" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\077\021\075\022\100\023\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\077\022\105\023\076\001\001\000" +
    "\002\001\001\000\004\060\107\001\001\000\010\004\044" +
    "\061\046\072\110\001\001\000\002\001\001\000\004\024" +
    "\112\001\001\000\030\025\135\026\137\027\114\030\122" +
    "\031\124\032\130\036\126\037\131\041\121\042\113\043" +
    "\132\001\001\000\004\075\312\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\076\275\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\042\147\043\132\045\272\046\153\047\146\050" +
    "\161\051\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\265\001\001\000\030\025" +
    "\261\026\137\027\114\030\122\031\124\032\130\036\126" +
    "\037\131\041\121\042\113\043\132\001\001\000\030\025" +
    "\260\026\137\027\114\030\122\031\124\032\130\036\126" +
    "\037\131\041\121\042\113\043\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\040\141\041" +
    "\142\042\113\043\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\033\152\034\144\035\160\042\147\043" +
    "\132\045\150\046\153\047\146\050\161\051\157\001\001" +
    "\000\002\001\001\000\004\004\241\001\001\000\010\054" +
    "\224\056\221\103\226\001\001\000\002\001\001\000\004" +
    "\057\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\042\147\043\132\046\176\047\146\050\161\051\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\105\165" +
    "\001\001\000\020\042\147\043\132\045\163\046\153\047" +
    "\146\050\161\051\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\055\167\001\001\000\002\001\001\000" +
    "\004\106\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\042\147\043\132\051\173\001\001\000\002\001" +
    "\001\000\024\034\175\035\160\042\147\043\132\045\150" +
    "\046\153\047\146\050\161\051\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\040\200\041\142\042\113" +
    "\043\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\042\147\043\132\045\211\046\153\047\146\050\161" +
    "\051\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\042\147\043\132\045" +
    "\215\046\153\047\146\050\161\051\157\001\001\000\004" +
    "\043\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\102\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\235\001\001\000\002\001\001\000\004\053\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\104\233\001\001\000\012\042\147\043\132" +
    "\050\234\051\157\001\001\000\004\105\165\001\001\000" +
    "\016\042\147\043\132\046\236\047\146\050\161\051\157" +
    "\001\001\000\002\001\001\000\016\042\147\043\132\046" +
    "\240\047\146\050\161\051\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\042\147\043\132\045\243\046" +
    "\153\047\146\050\161\051\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\033\246\034\144\035\160\042" +
    "\147\043\132\045\150\046\153\047\146\050\161\051\157" +
    "\001\001\000\002\001\001\000\020\042\147\043\132\045" +
    "\250\046\153\047\146\050\161\051\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\074\263\001\001\000\030\025\264\026\137\027\114" +
    "\030\122\031\124\032\130\036\126\037\131\041\121\042" +
    "\113\043\132\001\001\000\002\001\001\000\030\025\135" +
    "\026\137\027\114\030\122\031\124\032\130\036\126\037" +
    "\131\041\121\042\113\043\132\001\001\000\002\001\001" +
    "\000\026\033\270\034\144\035\160\042\147\043\132\045" +
    "\150\046\153\047\146\050\161\051\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\077\277" +
    "\001\001\000\020\042\147\043\132\045\300\046\153\047" +
    "\146\050\161\051\157\001\001\000\004\100\301\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\042\305\043\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\052\321\054\324\056\323\001\001\000\022" +
    "\042\147\043\132\044\315\045\314\046\153\047\146\050" +
    "\161\051\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\042\147\043\132\044\320\045" +
    "\314\046\153\047\146\050\161\051\157\001\001\000\002" +
    "\001\001\000\020\042\147\043\132\045\325\046\153\047" +
    "\146\050\161\051\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\331\011\327\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\336\011\327\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  Tab.init(); 

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	
	
	
    Logger log = Logger.getLogger(getClass());
   
    //REDEFINE LOGGER METHODS
    //======================================================================================
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSyntax error : ", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Error : parsing has to be stopped", cur_token);
    }

    public void report_error(String message, Object info)
      {
        System.err.print(message);
        System.err.flush();
        if (info instanceof Symbol)
                  System.err.println("Error : on line " + ((Symbol)info).left);
        else System.err.println("");
      }

    //======================================================================================

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	CompilerImpl impl = new CompilerImpl() ;	

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // MulOpLeft ::= MOD 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.rem); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // MulOpLeft ::= DIV 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.div); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // MulOpLeft ::= MUL 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.mul); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // MulOpRight ::= ASSIGN_MOD 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.rem); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOpRight",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // MulOpRight ::= ASSIGN_DIV 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.div); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOpRight",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // MulOpRight ::= ASSIGN_MUL 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.mul); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOpRight",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // AddOpRight ::= ASSIGN_SUB 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.sub); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOpRight",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // AddOpRight ::= ASSIGN_ADD 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.add);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOpRight",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // AddOpLeft ::= SUB 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.sub); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOpLeft",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // AddOpLeft ::= ADD 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.add); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOpLeft",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // RelOp ::= BLS 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.lt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // RelOp ::= BGR 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.gt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // RelOp ::= BLE 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.le); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // RelOp ::= BGE 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.ge); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // RelOp ::= NEQ 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.ne); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // RelOp ::= EQ 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.eq); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // AssignOp ::= MulOpRight 
            {
              Object RESULT =null;
		int intOpCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intOpCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object intOpCode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = intOpCode;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // AssignOp ::= AddOpRight 
            {
              Object RESULT =null;
		int intOpCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intOpCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object intOpCode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = intOpCode;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // AssignOp ::= ASSIGN 
            {
              Object RESULT =null;
		 RESULT = new Integer(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Factor ::= LPAREN ExpressionWithSign RPAREN 
            {
              Object RESULT =null;
		int structExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int structExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object structExpression = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = impl.createExpression(structExpression); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Factor ::= NEW Type LSQUARE ExpressionWithSign RSQUARE 
            {
              Object RESULT =null;
		int structTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int structTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object structType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int objExprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int objExprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object objExpr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = impl.createArray(structType,objExpr,structTypeleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Factor ::= NEW Type 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Factor ::= BOOLCONST 
            {
              Object RESULT =null;
		int boolConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean boolConst = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.loadConstBool(boolConst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Factor ::= CHARCONST 
            {
              Object RESULT =null;
		int charConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int charConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character charConst = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.loadConstChar(charConst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Factor ::= NUMBER 
            {
              Object RESULT =null;
		int integerConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int integerConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer integerConst = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.loadConstInteger(integerConst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Factor ::= Designator LPAREN ExpressionWithSign RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Factor ::= Designator LPAREN RPAREN 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Factor ::= Designator 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.loadDesignator(obj); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FactorList ::= FactorList NT$14 MulOpLeft NT$15 Factor 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int objFactorListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int objFactorListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object objFactorList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int intOpCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int intOpCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object intOpCode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int objFactorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objFactorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object objFactor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  impl.loadIfArray(objFactorList); RESULT = impl.mulLeft(objFactorList, intOpCode, objFactor, intOpCodeleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FactorList",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int objFactorListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int objFactorListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object objFactorList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int intOpCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intOpCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object intOpCode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.incrementMulOpLeft(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$14 ::= 
            {
              Object RESULT =null;
		int objFactorListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objFactorListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object objFactorList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.loadIfArray(objFactorList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FactorList ::= Factor 
            {
              Object RESULT =null;
		int objFactorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objFactorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object objFactor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = objFactor; impl.checkArrayFactor(objFactor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FactorList",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TermList ::= TermList NT$12 AddOpLeft NT$13 FactorList 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int objTermListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int objTermListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object objTermList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int intOpCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int intOpCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object intOpCode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int objFactorListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objFactorListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object objFactorList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.loadIfArray(objFactorList); RESULT = impl.addLeft(objTermList, intOpCode, objFactorList, intOpCodeleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TermList",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int objTermListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int objTermListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object objTermList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int intOpCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intOpCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object intOpCode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.incrementAddOpLeft(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$12 ::= 
            {
              Object RESULT =null;
		int objTermListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objTermListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object objTermList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.loadIfArray(objTermList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TermList ::= FactorList 
            {
              Object RESULT =null;
		int objFactorListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objFactorListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object objFactorList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = objFactorList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TermList",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expression ::= TermList MulOpRight NT$11 Expression 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int objTermListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int objTermListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object objTermList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int intOpCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int intOpCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object intOpCode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int objExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object objExpression = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.mulRight(objTermList, intOpCode, objExpression, intOpCodeleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$11 ::= 
            {
              Object RESULT =null;
		int objTermListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int objTermListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object objTermList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int intOpCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intOpCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object intOpCode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.incrementMulOpRight(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expression ::= TermList AddOpRight NT$10 Expression 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int objTermListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int objTermListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object objTermList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int intOpCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int intOpCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object intOpCode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int objExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object objExpression = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.addRight(objTermList,intOpCode, objExpression, intOpCodeleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$10 ::= 
            {
              Object RESULT =null;
		int objTermListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int objTermListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object objTermList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int intOpCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intOpCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object intOpCode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.incrementAddOpRight(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expression ::= TermList 
            {
              Object RESULT =null;
		int objTermListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objTermListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object objTermList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  objTermList; impl.checkArrayFactorList(objTermList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ExpressionWithSign ::= Expression 
            {
              Object RESULT =null;
		int objExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object objExpression = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ((Obj)objExpression).getType(); impl.setFromDesignator(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionWithSign",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ExpressionWithSign ::= SUB Expression 
            {
              Object RESULT =null;
		int objExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object objExpression = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ((Obj)objExpression).getType(); impl.addNegation(); impl.setFromDesignator(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionWithSign",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ActualParameters ::= ExpressionWithSign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActualParameters",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ActualParameters ::= ExpressionWithSign COMMA ActualParameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActualParameters",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DesignatorRight ::= IDENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.designatorResolveIdentificator(id,idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorRight",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DesignatorRight ::= IDENT NT$7 LSQUARE NT$8 ExpressionWithSign NT$9 RSQUARE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = impl.designatorResolveIdentificator(id,idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorRight",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.checkInteger(ex,exleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
 impl.designatorExtensionResolveArray(idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$7 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.setDesignatorArrayExtension(id,idleft);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Designator ::= DesignatorRight 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = obj; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Designator",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Designator ::= Designator DOT DesignatorRight 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Designator",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DesignatorStatement ::= Designator DEC 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 impl.addDecrement(obj,objleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DesignatorStatement ::= Designator INC 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 impl.addIncrement(obj,objleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DesignatorStatement ::= Designator LPAREN ActualParameters RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DesignatorStatement ::= Designator NT$6 AssignOp ExpressionWithSign 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int objleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int structExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int structExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object structExpression = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.addAssign(obj,op,structExpression,objleft); impl.setInAssign(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$6 ::= 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.setInAssign(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // StatementSimple ::= PRINT LPAREN ExpressionWithSign COMMA NUMBER RPAREN SEMI_COMMA 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer len = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 impl.addPrint(str, len, strleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementSimple",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // StatementSimple ::= PRINT LPAREN ExpressionWithSign RPAREN SEMI_COMMA 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 impl.addPrint(str, 0, strleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementSimple",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // StatementSimple ::= READ LPAREN Designator RPAREN SEMI_COMMA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 impl.addRead(d, dleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementSimple",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // StatementSimple ::= DesignatorStatement SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementSimple",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // StatementSimple ::= ReturnStatement SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementSimple",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // StatementSimple ::= CONTINUE SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementSimple",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // StatementSimple ::= BREAK SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementSimple",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ForDesignatorStatement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForDesignatorStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ForDesignatorStatement ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForDesignatorStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ForCondition ::= FOR LPAREN ForDesignatorStatement SEMI_COMMA Condition SEMI_COMMA ForDesignatorStatement RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForCondition",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ForStatement ::= ForCondition Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStatement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ConditionFact ::= ExpressionWithSign RelOp ExpressionWithSign 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int integerOpCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int integerOpCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object integerOpCode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.addConditionFact(expr1,integerOpCode, expr2, integerOpCodeleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionFact",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ConditionFact ::= ExpressionWithSign 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.addConditionFact(expr1,expr1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionFact",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ConditionTerm ::= ConditionFact AND ConditionTerm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionTerm",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ConditionTerm ::= ConditionFact 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionTerm",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Condition ::= ConditionTerm OR Condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Condition ::= ConditionTerm 
            {
              Object RESULT =null;
		 impl.addConditionTerm(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IfCondition ::= IF LPAREN Condition RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfCondition",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IfStatement ::= IfCondition Statement 
            {
              Object RESULT =null;
		 impl.endIf(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStatement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IfStatement ::= IfCondition Statement ELSE NT$5 Statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 impl.endIf(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStatement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$5 ::= 
            {
              Object RESULT =null;
 impl.endIfPart(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ReturnStatement ::= RETURN 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.returnMatched(Tab.noType,lleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ReturnStatement ::= RETURN ExpressionWithSign 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.returnMatched(str,lleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // StatementComplex ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementComplex",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // StatementComplex ::= ForStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementComplex",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // StatementComplex ::= IfStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementComplex",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Statement ::= StatementComplex 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Statement ::= StatementSimple 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LocalVar ::= IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 impl.defineArray(vName, false, vNameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVar",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LocalVar ::= IDENT 
            {
              Object RESULT =null;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.defineVar(vName, false, vNameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVar",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LocalVarList ::= LocalVar COMMA LocalVarList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVarList",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LocalVarList ::= LocalVar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVarList",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LocalVarListExt ::= Type NT$4 LocalVarList SEMI_COMMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tName = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVarListExt",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$4 ::= 
            {
              Object RESULT =null;
		int tNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tName = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.setCurrentType(tName); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LocalVarWrapper ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVarWrapper",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LocalVarWrapper ::= LocalVarWrapper LocalVarListExt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVarWrapper",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodArg ::= Type IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodArg",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodArg ::= Type IDENT 
            {
              Object RESULT =null;
		int structTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int structTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object structType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stringIdNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringIdNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String stringIdName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.defineMethodArg(structType, stringIdName, stringIdNameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodArg",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodArgList ::= MethodArg COMMA MethodArgList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodArgList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MethodArgList ::= MethodArg 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodArgList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MethodArgWrapper ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodArgWrapper",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MethodArgWrapper ::= MethodArgList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodArgWrapper",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MethodReturnType ::= VOID IDENT 
            {
              Object RESULT =null;
		int stringTypeNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringTypeNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String stringTypeName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.defineMethod(null, stringTypeName, stringTypeNameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodReturnType",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MethodReturnType ::= Type IDENT 
            {
              Object RESULT =null;
		int stringTypeNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stringTypeNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object stringTypeName = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stringIdNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringIdNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String stringIdName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.defineMethod(stringTypeName,stringIdName,stringIdNameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodReturnType",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MethodStatic ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodStatic",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MethodStatic ::= STATIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodStatic",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Method ::= MethodStatic MethodReturnType LPAREN MethodArgWrapper RPAREN LocalVarWrapper NT$3 LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.endMethod(lineleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$3 ::= 
            {
              Object RESULT =null;
 impl.enterMethod(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MethodList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MethodList ::= MethodList Method 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MethodListExt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodListExt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MethodListExt ::= LBRACE MethodList RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodListExt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ExtendedClass ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExtendedClass",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ExtendedClass ::= EXTENDS Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExtendedClass",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ClassDeclaration ::= CLASS IDENT NT$2 ExtendedClass LBRACE LocalVarWrapper MethodListExt RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int stringClassNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int stringClassNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String stringClassName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 impl.endClass(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$2 ::= 
            {
              Object RESULT =null;
		int stringClassNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringClassNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String stringClassName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.defineClass(stringClassName, stringClassNameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // GlobalVar ::= IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		int stringVarNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stringVarNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String stringVarName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 impl.defineArray(stringVarName, true, stringVarNameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVar",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GlobalVar ::= IDENT 
            {
              Object RESULT =null;
		int stringVarNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringVarNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String stringVarName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.defineVar(stringVarName,true,stringVarNameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVar",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GlobalVarList ::= GlobalVar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GlobalVarList ::= GlobalVar COMMA GlobalVarList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // GlobalVarDeclarationList ::= Type NT$1 GlobalVarList SEMI_COMMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int structTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int structTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object structType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalVarDeclarationList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$1 ::= 
            {
              Object RESULT =null;
		int structTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int structTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object structType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.setCurrentType(structType); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Value ::= BOOLCONST 
            {
              Object RESULT =null;
		int objectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean object = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = object; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Value ::= CHARCONST 
            {
              Object RESULT =null;
		int objectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character object = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = object; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Value ::= NUMBER 
            {
              Object RESULT =null;
		int objectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer object = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = object; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= IDENT 
            {
              Object RESULT =null;
		int stringTypeNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringTypeNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String stringTypeName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = impl.findType(stringTypeName, stringTypeNameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDecl ::= IDENT ASSIGN Value 
            {
              Object RESULT =null;
		int stringConstNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stringConstNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String stringConstName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int objectValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int objectValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object objectValue = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.defineConst(stringConstName,objectValue,stringConstNameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDecl",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstList ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstList",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstList ::= ConstDecl COMMA ConstList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstList",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstDeclarationList ::= CONST Type NT$0 ConstList SEMI_COMMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int structTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int structTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object structType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDeclarationList",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
		int structTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int structTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object structType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 impl.setCurrentType(structType); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDeclarationList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalDeclarationList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalDeclarationList ::= GlobalDeclarationList GlobalVarDeclarationList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalDeclarationList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GlobalDeclarationList ::= GlobalDeclarationList ConstDeclarationList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalDeclarationList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GlobalDeclarationList ::= GlobalDeclarationList ClassDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalDeclarationList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramName ::= IDENT 
            {
              Object RESULT =null;
		int stringProgramNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringProgramNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String stringProgramName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 impl.startProgram(stringProgramName); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgramName",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgramName GlobalDeclarationList MethodListExt 
            {
              Object RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object pName = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 impl.endProgram(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

